1
00:00:02,090 --> 00:00:09,330
最後に、実際に重要なエラーメッセージを実際に見たことがありますが、論理エラーが発生していることがあります。

2
00:00:09,330 --> 00:00:12,210
&nbsp;

3
00:00:12,210 --> 00:00:15,830
エラーメッセージは表示されませんが、何とか動作していません。

4
00:00:16,170 --> 00:00:23,160
私たちがユーザーIDとIDを比較すると言う、更新したい人のインデックスを見つけると、名前がハンドラを変更したとしましょう。

5
00:00:23,160 --> 00:00:26,180
&nbsp;

6
00:00:26,460 --> 00:00:30,570
これは間違っている人は、ユーザーIDのプロパティがありません。

7
00:00:30,570 --> 00:00:38,640
ユーザーIDは定義されていませんが、見つけた人と見つからないものとを比較することはできますが、エラーは発生しません。

8
00:00:38,970 --> 00:00:42,360
&nbsp;

9
00:00:42,360 --> 00:00:48,470
だから、私が最後の講義からの誤りを修正する方法でこのコードを保存すれば。

10
00:00:48,950 --> 00:00:56,630
したがって、このコードを保存してアプリケーションに戻ると、入力を開始するとエラーは発生しませんが、入力しただけで入力できます。

11
00:00:56,820 --> 00:00:58,860
&nbsp;

12
00:00:58,890 --> 00:01:00,030
更新されません。

13
00:01:00,060 --> 00:01:05,370
私はこの人の名前を正しく更新していないので、双方向のバインドを壊してしまったので、ここで私の更新された値は見えません。

14
00:01:05,370 --> 00:01:08,450
&nbsp;

15
00:01:08,460 --> 00:01:11,200
このような場合、私たちは何ができますか？

16
00:01:11,370 --> 00:01:14,320
コードをステップバイステップで歩くことができます。

17
00:01:14,370 --> 00:01:17,650
そのためには、クローム開発ツールを使用することをお勧めします。

18
00:01:17,760 --> 00:01:27,630
ここで、ソースタブにあるソースタップに移動して、コード構造をlocalhostの下に表示します。

19
00:01:27,630 --> 00:01:29,160
&nbsp;

20
00:01:29,160 --> 00:01:34,750
そこにソースフォルダがあり、実際にあなたのコードを見つけます。

21
00:01:34,770 --> 00:01:39,110
これで、生成されたソースマップが表示されます。

22
00:01:39,450 --> 00:01:47,220
&nbsp;

23
00:01:47,250 --> 00:01:53,730
&nbsp;

24
00:01:54,060 --> 00:01:57,690
基本的に、翻訳ファイルは、ブラウザ開発者ツールがコードを書いたときにコードに入り、ブラウザに出荷されるコードは異なるものになり、最適化されてバンドルされていてもデバッグできます。

25
00:01:57,800 --> 00:02:02,310
これは、ブラウザで実行されているコードではないにしても、あなたが書いたコードをデバッグすることができるので、非常にクールです。

26
00:02:02,310 --> 00:02:03,630
&nbsp;

27
00:02:03,780 --> 00:02:07,210
だからそこには私がここに入力するときに何かがうまくいかないことが分かっている。

28
00:02:07,380 --> 00:02:13,840
そしてコードを書いているときに、タイプするときに名前がハンドラを起動するように変更したことがわかっています。

29
00:02:13,980 --> 00:02:17,300
ここで行番号をクリックしてブレークポイントを設定しましょう。

30
00:02:17,700 --> 00:02:19,910
もう一度タイピングしましょう。

31
00:02:20,670 --> 00:02:23,890
私は1文字をタイプし、これは今これを一時停止しています。

32
00:02:24,180 --> 00:02:29,370
あなたはこれを追加しているのを見るでしょう。 e。

33
00:02:29,370 --> 00:02:32,260
これはtremelo要素の振る舞いを解消するものであり、もう一度それを上書きするすべてのコードを実行する必要があるからです。

34
00:02:32,520 --> 00:02:40,200
&nbsp;

35
00:02:40,290 --> 00:02:48,760
ここで通常のクロムデバッガツールを使用してコードを実行することができます。ここでは、インデックス関数を見つけて何が起こっているのかを理解するための次の関数呼び出しに入ることができます。

36
00:02:49,870 --> 00:02:53,950
だから今そこにデータを見ることができます。

37
00:02:53,950 --> 00:02:57,510
そこにはpオブジェクトのような鯨船があります。

38
00:02:57,520 --> 00:03:03,610
さて、これは、Maxが現在見ているオブジェクトです。

39
00:03:03,620 --> 00:03:08,580
次に、私たちは考え方を持っています。

40
00:03:08,710 --> 00:03:17,050
また、この表現は未定義であることがわかります。これをs f aの考え方と比較します。

41
00:03:17,050 --> 00:03:18,210
&nbsp;

42
00:03:18,250 --> 00:03:26,200
これは、この刑務所と一致する必要があります。私たちはユーザーIDにアクセスしてから未定義であると判断し、ユーザーIDが有効なIDではないことを明確に確認できます。

43
00:03:26,640 --> 00:03:35,530
idオブジェクトをその情報で置き換えます。

44
00:03:35,530 --> 00:03:41,150
&nbsp;

45
00:03:41,380 --> 00:03:46,960
このプロセスを終了してコードに戻り、論理エラーを修正することができます。

46
00:03:47,050 --> 00:03:55,120
したがって、自動的に生成されるソースマップでクロムデバッガツールを使用することは、論理エラーを検出するための強力な機能です。

47
00:03:55,120 --> 00:03:57,820
&nbsp;

48
00:03:57,850 --> 00:04:03,140
ブラウザで実行されているコードではないにしても、あなたはあなたのコードを歩くことができます。

49
00:04:03,310 --> 00:04:06,200
だからあなたが知っておくべき素晴らしいツールがあります。

50
00:04:06,340 --> 00:04:13,210
[ソース]タブで開発者ツールを使用してエラーを見つけて修正するには、元のコードをソースマップにアクセスできます。

51
00:04:13,210 --> 00:04:15,600
&nbsp;

1
00:00:02,170 --> 00:00:09,100
ここまでで、エラーを処理し、アプリケーションの状態を調べる方法について多くのことを学びます。

2
00:00:09,100 --> 00:00:09,900
&nbsp;

3
00:00:10,060 --> 00:00:16,240
今や、実行時に失敗する可能性のあるコードがありますが、そのコードを知っていることがありますが、常に動作することを保証することはできません。

4
00:00:16,240 --> 00:00:17,510
&nbsp;

5
00:00:17,620 --> 00:00:24,100
この場合、おそらくユーザーに素晴らしい画面または少なくともカスタムエラーメッセージを表示する必要があります。

6
00:00:24,100 --> 00:00:27,350
あなたに構成例を示してみましょう。

7
00:00:27,680 --> 00:00:36,170
さて、人のクラスをレンダリングすると、実際にはエラーが発生する可能性があるとしましょう。

8
00:00:36,340 --> 00:00:46,270
だから私は乱数をランダムに作成し、ランダムがドット7より大きければ30％の確率を得て、実際には新しいエラーを投げたり、何かが間違っていたりします。これはreturnステートメントではなく、関数体。

9
00:00:46,270 --> 00:00:58,240
&nbsp;

10
00:00:58,240 --> 00:01:01,300
&nbsp;

11
00:01:01,300 --> 00:01:04,630
これで、このエラーが発生することがあります。

12
00:01:04,810 --> 00:01:06,050
これを試してみましょう。

13
00:01:06,070 --> 00:01:11,400
このコンポーネントを保存し、人について話しましょう。すぐに失敗しました。

14
00:01:11,440 --> 00:01:16,240
このエラーが発生したのは、3つのコンポーネントがあり、各コンポーネントに40％のチャンスがあるからです。

15
00:01:16,360 --> 00:01:17,870
それはそうではありません。

16
00:01:17,980 --> 00:01:20,280
時にはそれは成功するはずです。

17
00:01:20,320 --> 00:01:21,440
この場合のように。

18
00:01:21,790 --> 00:01:26,470
しかし、ここでもまた時にはそれはここでも失敗するでしょう。

19
00:01:26,470 --> 00:01:28,110
何かが間違っていた。

20
00:01:28,120 --> 00:01:30,510
今ここでこれが構築されます。

21
00:01:30,610 --> 00:01:35,770
&nbsp;

22
00:01:35,770 --> 00:01:41,670
しかし、実際のアプリケーションでは、実際にいくつかの動作を実行するコードをいくつかのWebサーバに送り出すことができます。これは間違いなく失敗する可能性があり、何もしないことを保証することはできません。

23
00:01:41,670 --> 00:01:46,970
このエラーを少なくともキャッチして、それを優雅に扱うのはいいですね。

24
00:01:46,980 --> 00:01:47,450
フロリダ州。

25
00:01:47,470 --> 00:01:52,480
私は新しいコンポーネントを作成し、これは再動作16で追加された新しい機能です。

26
00:01:52,840 --> 00:01:53,980
私はそれに名前をつけます。

27
00:01:53,980 --> 00:01:59,690
エラーまたは境界は、いわゆるアラブ境界コンポーネントをそこに作成できるためです。

28
00:02:00,620 --> 00:02:02,930
私はそこにもアラブ境界という名前をつけます。

29
00:02:02,950 --> 00:02:04,470
名前はあなた次第です。

30
00:02:04,690 --> 00:02:11,920
Aero boundaryというコンセプトだが、ここで好きなようにこのコンポーネントに名前を付けることができる。

31
00:02:11,980 --> 00:02:19,570
私はクラスのエラーまたは境界を作成し、コンポーネントを拡張します。

32
00:02:19,720 --> 00:02:29,160
だから、私は両方の反応をインポートする必要がありますし、中括弧で囲まれた名前のついたコンポーネントをそのように反応させます。

33
00:02:29,160 --> 00:02:30,750
&nbsp;

34
00:02:30,780 --> 00:02:36,200
そこで、このコンポーネントは、そこにアパーチャコンポーネントを作成したのと同じように扱います。

35
00:02:36,200 --> 00:02:40,120
私は何かをレンダリングしたい、私は何かを返すだろう。

36
00:02:40,200 --> 00:02:48,450
私は何かがこのように何か間違っていたと言った1歳のタグで単純に戻ってきます。

37
00:02:48,720 --> 00:02:55,170
私はエラーがある場合、私は状態を追加するので、私はこれを返すだけです。

38
00:02:55,170 --> 00:03:05,220
ここでクラスを使用して状態を設定する必要がある理由の1つに、エラーまたは偽またはすべてがあり、ここに空の文字列であるエラーメッセージを格納する必要があります。

39
00:03:05,220 --> 00:03:09,250
&nbsp;

40
00:03:09,250 --> 00:03:12,780
今私は新しいプロパティや新しいメソッドを追加することができます。

41
00:03:12,780 --> 00:03:22,990
コンポーネントは潜在的なエラーを受け取ったMethotを捕まえましたが、何らかの追加情報が自動的に反応して渡され、Caponeがキャッチした場合はいつでもコンポーネントが実行されます。

42
00:03:22,990 --> 00:03:31,100
&nbsp;

43
00:03:31,120 --> 00:03:34,610
我々は矢印の境界の凍結エラーでラップする。

44
00:03:34,810 --> 00:03:36,790
私はそれを1秒で使用する方法をお見せします。

45
00:03:36,790 --> 00:03:38,880
まず最初に、ここでロジックを完成させましょう。

46
00:03:39,370 --> 00:03:43,170
そこに私たちは今や誤りを持っているので私は状態を設定したい。

47
00:03:43,450 --> 00:03:55,160
私はエラーがあまりにも真実であると設定し、私は実際にレンダリングメソッドでそのメッセージであるはずのエラーに等しいエラーメッセージを設定します。実際には2つの可能な結果があります。

48
00:03:56,820 --> 00:04:00,870
&nbsp;

49
00:04:01,870 --> 00:04:06,610
これまでのところ、私たちの状態には誤りがあります。

50
00:04:06,610 --> 00:04:11,430
私は何かが間違っていたり、正確であることを返そうとしています。

51
00:04:11,440 --> 00:04:14,120
私はエラーメッセージを表示することはできません。

52
00:04:14,140 --> 00:04:24,790
だからこの州のエラーメッセージか、そうでなければ私はこの小道具の子供たちを返します。

53
00:04:25,140 --> 00:04:30,480
これは、クラスコンポーネントのpropにアクセスするときに重要です。

54
00:04:30,660 --> 00:04:36,350
あなたは、あなたが州で行ったのと同じように、その前にこれを追加する必要があります。

55
00:04:36,360 --> 00:04:41,830
だから、これは子供たちが私たちがエロ境界の中に包み込むものであることを促します。

56
00:04:41,890 --> 00:04:49,710
これは私たちのデフォルトのケースでなければなりませんが、アラブの境界を包み込むものによってエラーが発生したり投げ捨てられたりすると、あなたは消火され、erroが設定されます。

57
00:04:50,360 --> 00:04:53,680
&nbsp;

58
00:04:53,690 --> 00:04:56,970
真実なので、私たちはこれを返すことができます。

59
00:04:56,980 --> 00:05:00,070
さて、単にデフォルトをエクスポートしてみましょう。

60
00:05:00,070 --> 00:05:01,810
これを輸出させてください。

61
00:05:01,840 --> 00:05:03,940
誤差または境界成分。

62
00:05:04,300 --> 00:05:06,050
それでは、それを使い始めましょう。

63
00:05:07,120 --> 00:05:12,090
私はNEAP Jrの秋を使用し、私の人をそれで包みます。

64
00:05:12,520 --> 00:05:19,060
そのため、そのスラッシュの矢印または境界からそのフォルダまたはフォルダにエラーまたは境界をインポートします。

65
00:05:20,370 --> 00:05:28,670
そしてそこに境界Jariusはファイル拡張子なしでいつもどおりに落ちて、今私たちの人をそれで包みましょう。

66
00:05:28,790 --> 00:05:29,570
&nbsp;

67
00:05:29,840 --> 00:05:34,090
ここに私がそこに帰ったリストがここにあります。

68
00:05:34,100 --> 00:05:42,450
私は実際にdetと同様に空気や境界線で包み込みたいのです。

69
00:05:42,560 --> 00:05:53,100
人のエラーまたは境界の終了タグの後にエラー境界がいわゆる高次コンポーネントである。

70
00:05:53,350 --> 00:06:00,240
これは、コンポーネントがスローする可能性のあるエラーを処理するという目的でコンポーネントを単にラップするコンポーネントです。

71
00:06:00,270 --> 00:06:01,170
&nbsp;

72
00:06:01,390 --> 00:06:04,120
エラー境界の場合、それはその仕事です。

73
00:06:04,270 --> 00:06:12,010
&nbsp;

74
00:06:12,220 --> 00:06:18,990
&nbsp;

75
00:06:19,210 --> 00:06:24,040
その人はアラブ境界でラップしているので、ここではJudyの矢印境界にキーを移動する必要があります。これはマップ要素の外部要素であり、キーは常にマップメソッド内の外部要素になければならないためです。複製する。

76
00:06:24,040 --> 00:06:29,110
これで、すべてのファイルが保存され、アプリケーションに戻ることを確実にすることができます。

77
00:06:29,110 --> 00:06:36,790
今度は、あなたがエラーを得るまで人と話す場合、あなたは残念ながらここで真ん中のエラーを見るでしょう。

78
00:06:36,970 --> 00:06:40,090
これは開発モードでのみ発生します。

79
00:06:40,240 --> 00:06:46,690
本番用にこれを構築し、それを実際のサーバーに送ったら、このようにページを上書きしません。

80
00:06:46,690 --> 00:06:47,860
&nbsp;

81
00:06:47,860 --> 00:06:56,000
代わりに、エラーメッセージやその他のデフォルトメッセージなど、エラー境界内にレンダリングしたものが表示されます。

82
00:06:56,020 --> 00:07:00,420
&nbsp;

83
00:07:00,430 --> 00:07:06,820
これは、エラー境界でアプリケーション全体をクラスタリングする必要があるわけではありません。

84
00:07:07,000 --> 00:07:08,340
&nbsp;

85
00:07:08,470 --> 00:07:14,550
したがって、基本的には、失敗する可能性があることを知っているコードがある場合にのみ使用してください。

86
00:07:14,600 --> 00:07:21,400
Avroコードをラップしないでください。通常のコードが失敗した場合、開発者が開発中におそらく間違いを起こしたためです。

87
00:07:21,400 --> 00:07:22,390
&nbsp;

88
00:07:22,690 --> 00:07:29,200
あなたがそれが失敗する可能性があり、あなたがそれを制御できないことを知っている場合にのみ、アラブ境界を使用してください。

89
00:07:29,200 --> 00:07:36,370
&nbsp;

90
00:07:36,370 --> 00:07:43,810
&nbsp;

91
00:07:43,810 --> 00:07:48,120
これは、実際のアプリケーションが実際に正常に動作し、問題のあるコンポーネントだけがカスタムエラーメッセージに置き換えられるため、カスタムエラーメッセージを表示してアプリケーション全体が失敗することのない、プロダクション用の素晴らしいツールとなる可能性があります。

92
00:07:48,160 --> 00:07:56,020
だからエアロの境界は、あなたのアプリケーションのどこにでも使用できるツールを知っているので、このLileksの解決プロジェクトに飛び込むときに次のモジュールから始めるためのツールではない素晴らしいツールです。

93
00:07:56,020 --> 00:08:01,150
&nbsp;

94
00:08:01,150 --> 00:08:04,540
私もこれを包み込まないように取り除きます。

95
00:08:04,540 --> 00:08:10,170
私はこのエラーをシミュレートするために私のカスタムエラーまたはここでソースを削除します。

96
00:08:10,200 --> 00:08:11,830
これはこのモジュール専用です。

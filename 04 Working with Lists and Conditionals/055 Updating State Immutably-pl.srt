1
00:00:02,190 --> 00:00:06,300
W ostatnim wykładzie zaczęliśmy usuwać osoby, robiliśmy to

2
00:00:06,300 --> 00:00:11,830
uzyskując dostęp do wszystkich osób w stanie, usuwając jeden element, który

3
00:00:11,830 --> 00:00:16,320
chcieliśmy usunąć, używając indeksu osoby i aktualizując stan.

4
00:00:16,320 --> 00:00:23,700
Wada tego podejścia polega na tym, że w javascriptie obiekty i tablice są

5
00:00:23,700 --> 00:00:31,860
typami referencyjnymi, więc kiedy dostaję osoby z mojego stanu, tak jak ja tutaj, dostaję wskaźnik

6
00:00:31,860 --> 00:00:35,370
do obiektu oryginalnej osoby zarządzanej przez

7
00:00:35,370 --> 00:00:43,560
reakcję, do pierwotnego stanu, który powinienem powiedzieć . Jeśli potem go tutaj spakuję, już zmutowuję oryginalne dane i

8
00:00:43,560 --> 00:00:47,180
chociaż działa bez popełnienia błędu, nie jest tak, jak

9
00:00:47,190 --> 00:00:52,850
powinieneś to zrobić, może to prowadzić do nieprzewidywalnych aplikacji i jest zdecydowanie złą praktyką.

10
00:00:52,920 --> 00:01:00,810
Dobrą praktyką jest utworzenie kopii macierzy osób przed jej manipulacją, a

11
00:01:00,810 --> 00:01:08,430
prostym sposobem jest wywołanie metody plasterka. Kawałek bez argumentów po prostu kopiuje pełną tablicę i zwraca

12
00:01:08,430 --> 00:01:10,950
nową, która jest następnie przechowywana tutaj.

13
00:01:11,190 --> 00:01:18,570
Możesz teraz bezpiecznie edytować ten nowy, a następnie zaktualizować go do stanu reakcji z nową tablicą.

14
00:01:19,400 --> 00:01:28,950
Alternatywą dla tego podejścia byłoby użycie go jako funkcji ES6, operatora rozprzestrzeniania. Możesz po prostu ustawić osoby równe nowej macierzy,

15
00:01:28,950 --> 00:01:37,400
a ta nowa tablica może teraz używać operatora rozrzutu, który może wyglądać dziwnie, ale

16
00:01:37,580 --> 00:01:39,540
jest to operator

17
00:01:39,540 --> 00:01:43,650
javascript, do którego teraz podchodzisz do osób stanu.

18
00:01:43,700 --> 00:01:50,180
To, co to robi, rozkłada elementy w tej tablicy na listę elementów, które po prostu zostają

19
00:01:50,180 --> 00:01:56,920
dodane do tej tablicy, dzięki czemu teraz mamy tablicę, nową tablicę, z obiektami ze starej tablicy,

20
00:01:57,170 --> 00:01:59,480
ale nie ze starą tablicą samo.

21
00:01:59,720 --> 00:02:02,720
Jest to w zasadzie odpowiednik metody wycinania,

22
00:02:02,720 --> 00:02:04,350
użyj tego, który preferujesz,

23
00:02:04,490 --> 00:02:11,060
jest to bardziej nowoczesny i częściej będziesz widzieć tego operatora rozprzestrzeniania się w trakcie kursu.

24
00:02:11,080 --> 00:02:16,050
Dzięki temu uzyskujemy takie samo zachowanie jak poprzednio i nie naprawiliśmy komunikatów o błędach,

25
00:02:16,060 --> 00:02:21,790
nadal działa tak jak poprzednio, ale mogę powiedzieć, że jest to lepsze podejście do aktualizacji stanu.

26
00:02:21,800 --> 00:02:28,160
Powinieneś zawsze aktualizować stan w niezmienny sposób, bez uprzedniego zmutowania oryginalnego stanu.

27
00:02:28,430 --> 00:02:33,780
Utwórz kopię, zmień ją, a następnie zaktualizuj stan na wymieniony stan.

28
00:02:33,830 --> 00:02:37,590
Nadal istnieją rzeczy, które możemy i powinniśmy poprawić na naszej liście.

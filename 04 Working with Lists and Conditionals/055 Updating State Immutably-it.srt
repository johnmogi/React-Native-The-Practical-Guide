1
00:00:02,190 --> 00:00:06,300
Nell'ultima lezione abbiamo iniziato a rimuovere le persone.

2
00:00:06,300 --> 00:00:11,830
Lo abbiamo fatto ottenendo l'accesso a tutte le persone nello stato rimuovendo l'elemento che

3
00:00:11,830 --> 00:00:16,320
lo desiderava rimosso utilizzando l'indice della persona e aggiornando lo stato.

4
00:00:16,320 --> 00:00:23,700
Il difetto di questo approccio è che negli oggetti e negli array javascript ci sono tipi di riferimento.

5
00:00:23,700 --> 00:00:31,860
Quindi quando ottengo persone dal mio stato come faccio qui, ottengo effettivamente un puntatore all'oggetto della

6
00:00:31,860 --> 00:00:35,370
persona originale gestito reagendo allo stato originale.

7
00:00:35,370 --> 00:00:43,560
Dovrei dire se poi lo unisco qui mito già questi dati originali e una volta che funziona senza generare

8
00:00:43,560 --> 00:00:47,180
un errore non è proprio come dovresti farlo.

9
00:00:47,190 --> 00:00:52,850
Questo può portare a app imprevedibili ed è decisamente una cattiva pratica.

10
00:00:52,920 --> 00:01:00,810
Una buona pratica è creare una copia dell'array di persistenza prima di manipolarlo e un modo semplice per

11
00:01:00,810 --> 00:01:08,430
farlo è chiamando la slice del metodo slice senza argomenti, semplicemente copia l'array completo e ne restituisce uno

12
00:01:08,430 --> 00:01:10,950
nuovo che viene quindi memorizzato qui.

13
00:01:11,190 --> 00:01:18,570
E ora puoi tranquillamente modificare questo nuovo e poi aggiornare fare lo stato di reazione con il tuo nuovo array.

14
00:01:19,400 --> 00:01:28,950
Un'alternativa a questo approccio sarebbe quella di usarlo come sei funzionalità dell'operatore di spread, è possibile semplicemente impostare portamonete pari a un

15
00:01:28,950 --> 00:01:37,400
nuovo array e questo nuovo array può ora utilizzare l'operatore di spread che sono punti gratuiti potrebbe sembrare strano

16
00:01:37,580 --> 00:01:39,540
ma questo è javascript.

17
00:01:39,540 --> 00:01:43,650
Operatore Dove ti trovi ora nelle carceri di stato.

18
00:01:43,700 --> 00:01:50,180
Ciò che fa è distribuire gli elementi come array in un elenco di elementi che semplicemente vengono

19
00:01:50,180 --> 00:01:56,920
aggiunti a questo array in modo che ora abbiamo un array un nuovo array con gli oggetti dal

20
00:01:57,170 --> 00:01:59,480
vecchio array ma non l'array stesso.

21
00:01:59,720 --> 00:02:02,720
Quindi questo è fondamentalmente equivalente all'approccio fetta.

22
00:02:02,720 --> 00:02:04,350
Usa quello che preferisci.

23
00:02:04,490 --> 00:02:11,060
Questo è il più moderno e vedrai che questa lettura funziona più spesso per il corso.

24
00:02:11,080 --> 00:02:16,050
Con ciò otteniamo lo stesso comportamento di prima e non abbiamo risolto i messaggi di errore con quello.

25
00:02:16,060 --> 00:02:21,790
Funziona ancora come prima, ma posso dirvi che è l'approccio migliore per l'aggiornamento dello stato.

26
00:02:21,800 --> 00:02:28,160
Si dovrebbe sempre aggiornare lo stato in modo immutabile, quindi senza mutare lo stato originale, prima creare

27
00:02:28,430 --> 00:02:33,780
un debito di modifica della copia e quindi aggiornare lo stato con detto stato.

28
00:02:33,830 --> 00:02:37,590
Tuttavia ci sono cose che possiamo e dovremmo migliorare sulla nostra lista, però.

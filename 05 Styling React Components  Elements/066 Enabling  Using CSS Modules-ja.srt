1
00:00:02,190 --> 00:00:08,640
最後の講義ではラジウムについて学びます。これは人気があり、メディアクエリのような機能を持つインラインスタイルを使用することができます。

2
00:00:08,640 --> 00:00:12,780
&nbsp;

3
00:00:12,780 --> 00:00:19,020
これは、あなたのStahlが簡単に編集でき、メディアCorryのような機能を使用できるようにするための1つの方法です。

4
00:00:19,020 --> 00:00:19,870
&nbsp;

5
00:00:20,010 --> 00:00:21,610
しかしそれだけではありません。

6
00:00:21,750 --> 00:00:27,270
SSのようなC Sファイルがあなたのようにスコープできる場合、それは素晴らしいことではないでしょうか。

7
00:00:27,270 --> 00:00:35,340
Stahlがここで定義するものがインポートされ、このコンポーネントの要素に割り当てられ、Stultsやその他のコンポーネントやアプリケーションの他の部分をオーバーライドしないように、JSEコンポーネントがファイルする人。

8
00:00:35,340 --> 00:00:42,450
&nbsp;

9
00:00:42,450 --> 00:00:43,130
&nbsp;

10
00:00:43,290 --> 00:00:50,520
私たちがC S Sクラスの名前を共有していたとしても、これは実際に可能であり、ここで使用するセットアップでは実際に可能です。

11
00:00:50,520 --> 00:00:53,040
モジュールとしてSEUSという名前の機能を使用できます。

12
00:00:53,340 --> 00:00:56,720
ここではsetを使う方法を示したいと思います。

13
00:00:56,730 --> 00:00:59,450
まず第一に、ラジウムを取り除く。

14
00:00:59,520 --> 00:01:02,390
あなたはまだこのモジュールに添付された古いコードをダウンロードすることができます。

15
00:01:02,400 --> 00:01:06,580
&nbsp;

16
00:01:06,700 --> 00:01:13,920
私はここで設定されたこのスタイルを廃止し、もはや涙をつけず、私の人の輸出をラジアムで包むことはもうしません。

17
00:01:13,950 --> 00:01:15,760
私は次のように絞りに行くでしょう。

18
00:01:15,840 --> 00:01:18,670
私のラジウムの輸入を取り除いて、私のスタイルのルートラッパーを取り除く。

19
00:01:18,780 --> 00:01:29,010
基本的にはラジウムのすべての痕跡を削除するために私の輸出のラッパーを削除し、今は私がホバーを上書きする部分または私が設定した部分を削除する必要があります。

20
00:01:29,070 --> 00:01:35,580
&nbsp;

21
00:01:35,580 --> 00:01:40,660
それはラジウムなしではもはや動かないからです。

22
00:01:40,710 --> 00:01:43,470
だから私たちはラジウムを加える前に私たちがいた世界に戻ってきました。

23
00:01:43,470 --> 00:01:47,280
FrueスコープのC

24
00:01:47,400 --> 00:01:55,710
S Sファイルをすべて処理し、実際にはこのプロジェクトのボルト構成を調整する必要があります。

25
00:01:55,710 --> 00:01:58,910
&nbsp;

26
00:01:58,920 --> 00:02:06,540
&nbsp;

27
00:02:06,600 --> 00:02:14,550
ここで私はDSの再動作スクリプトを使用していることをコースの前半で説明しました。これはビルドワークフロー全体を私たちに公開するパッケージであり、Contraveはノードモジュールフォルダを掘り下げてこのパッケージを検索できる設定に追加しました。それをそこに加えた。

28
00:02:14,550 --> 00:02:19,030
&nbsp;

29
00:02:19,290 --> 00:02:25,530
しかし、NPMのインストールを再実行するたびに変更が上書きされるため、決して実行しないでください。

30
00:02:25,530 --> 00:02:27,200
&nbsp;

31
00:02:27,210 --> 00:02:34,200
ありがたいことに、私たちにコンフィギュレーションへのアクセスを与えるコマンドがあります。

32
00:02:34,200 --> 00:02:38,440
すべてが管理されています。

33
00:02:38,520 --> 00:02:39,500
私にとっては、すべてのプロジェクトは私のために管理されていますが、私は今、設定プロジェクトを編集することができます。

34
00:02:39,500 --> 00:02:46,590
戻って行く方法はありませんが、前と同じように動作します。

35
00:02:46,620 --> 00:02:52,330
しかし、D構成を追加することができます。

36
00:02:52,470 --> 00:02:54,710
&nbsp;

37
00:02:54,720 --> 00:03:00,650
もちろん、これは、ここではモジュールとしてC-sの機能をロック解除するためにここで一緒にやってみましょう。

38
00:03:00,660 --> 00:03:04,950
&nbsp;

39
00:03:04,950 --> 00:03:13,590
変更を追跡するためにgoodを使用している場合は、ejectコマンドを実行する前にすべての変更を追加してコミットしてください。

40
00:03:13,740 --> 00:03:15,710
そうでなければ動作しません。

41
00:03:15,720 --> 00:03:17,620
これで、端末を開く必要があります。

42
00:03:17,760 --> 00:03:19,770
&nbsp;

43
00:03:19,800 --> 00:03:27,990
再度これはIDに統合されたものであり、NPMの実行を実行してここでイジェクトを実行して構成を取り出せます。

44
00:03:27,990 --> 00:03:29,310
今、私たちはテープに戻ってこないので、私たちはそれをしたいのかと尋ねられます。

45
00:03:29,310 --> 00:03:33,620
なぜ。

46
00:03:33,630 --> 00:03:34,530
そして、私たちは終わりました。

47
00:03:34,950 --> 00:03:36,330
そして今、突然、新しいフォルダにはscriptsフォルダとde-conflictフォルダが表示されます。

48
00:03:36,660 --> 00:03:42,360
&nbsp;

49
00:03:42,540 --> 00:03:48,110
&nbsp;

50
00:03:48,120 --> 00:03:53,880
スクリプトフォルダには、パッケージトラックの追跡に使用したコマンドごとに1つのスクリプトがあり、依存関係のリストが非常に静かになったことを確認するために皆さんを騙しています。たとえば、iOS

51
00:03:53,880 --> 00:03:59,610
6からEへのコンパイルを担当します。 S. 5。

52
00:03:59,650 --> 00:04:01,990
私たちはその構成に深く関わっていないという心配はありません。

53
00:04:02,010 --> 00:04:05,270
私たちはそれを微調整しません。

54
00:04:05,280 --> 00:04:06,090
それでも動作します。

55
00:04:06,090 --> 00:04:07,770
しかし、我々の紛争フォルダに興味深いのはWePayの死とWepaの葛藤です。

56
00:04:07,770 --> 00:04:14,520
Pegが基本的に適用されるバンドルツールを構築するParataファイル。

57
00:04:14,550 --> 00:04:21,060
私たちのファイルに対するあらゆる種類の変換と最適化を行い、それらをまとめてバンドルします。このプロセスの一環として、R

58
00:04:21,060 --> 00:04:28,050
C Sには注意が必要です。

59
00:04:28,050 --> 00:04:31,920
&nbsp;

60
00:04:32,050 --> 00:04:40,170
&nbsp;

61
00:04:40,240 --> 00:04:49,080
私は、このCSSAを解析できるWeb仕様がjavascriptファイルをインポートできると言ったことを忘れないでください。WePayはこのWebページの責任者ですから、Csフォルトを処理する方法と、余分な機能。

62
00:04:49,080 --> 00:04:53,910
私は、死んだモジュールとWeb picのコンフリクトデータのモジュールとしてC-sを使用することを指していました。

63
00:04:53,910 --> 00:04:59,730
Defファイルをモジュールにスクロールダウンし、Dにスポットするモジュールにスクロールします。 C. ここであなたはritziestのために次のようにテストします。

64
00:04:59,760 --> 00:05:10,280
&nbsp;

65
00:05:10,280 --> 00:05:14,310
&nbsp;

66
00:05:14,390 --> 00:05:19,880
そこにはこれらのローダーを使用しないので、追加する必要はありません。追加するべきではありませんが、ここではローダーのオプションを微調整します。

67
00:05:19,880 --> 00:05:23,510
そこで私はモジュールを真に設定します。単純に解析して言えるツールとして、ローダーとしての私たちを見ています。

68
00:05:24,050 --> 00:05:31,130
私たちのSPSSはそれを抽出して、そのC-sをモジュールとしてインポートします。

69
00:05:31,140 --> 00:05:37,510
私はどのように秒で使用する方法を示します機能。

70
00:05:37,520 --> 00:05:41,210
これは、モジュールを真に設定する1つの部分です。

71
00:05:41,280 --> 00:05:44,780
また、資本Iと資本Nを持つローカルID名を追加する必要があります。

72
00:05:44,780 --> 00:05:50,400
&nbsp;

73
00:05:50,900 --> 00:05:58,100
そして、ここでは、以下の文字列をここに追加する必要があります。この文字列は、見た目が曖昧に見えるかもしれませんが、最終的にはあなたのスタイルにとって重要です。

74
00:05:58,400 --> 00:06:00,600
&nbsp;

75
00:06:00,620 --> 00:06:07,280
クラスはコンポーネントごとに一意の名前を取得するため、クラスごとに異なるアプリケーションをオーバーライドしないように、クラスはsiestasクラスです。

76
00:06:07,310 --> 00:06:09,460
ここでは、角括弧を使用する必要があります。

77
00:06:09,680 --> 00:06:11,840
名前は基本的にあなたのものです。 c。 クラス名としてのアンダースコアはアンダースコアのローカルです。

78
00:06:11,840 --> 00:06:19,250
&nbsp;

79
00:06:19,250 --> 00:06:26,330
これは、ローダーとしてのACがローカルコンポーネントにそれを割り当てて基本的にスコープを設定し、次にアンダースコアを強調することを可能にします。ハッシュコロンベース64

80
00:06:26,330 --> 00:06:35,570
5基本的にユニークなハッシュを与えて、あなたのスタイルを上書きしないようにします。応用。

81
00:06:35,570 --> 00:06:39,620
今ここで設定したものを単純にコピーして、Propofolの競合を解除するか、Conficker Protを選択してください。

82
00:06:40,680 --> 00:06:49,260
C Sローダも検索してください。

83
00:06:49,350 --> 00:06:52,770
&nbsp;

84
00:06:53,680 --> 00:07:00,050
そして、あなたはそれが少し違って見え、間違いなく最小化とCirusのマップをオーバーライドしないことがわかります。

85
00:07:00,080 --> 00:07:00,750
&nbsp;

86
00:07:00,840 --> 00:07:05,650
しかし、私はファイルからすべてをコピーして以来、それはアフリカの統合の一部であったため、基本的にmonohulls trueとローカルID名を追加するため、Import Lowder'sを上書きします。

87
00:07:05,650 --> 00:07:10,900
&nbsp;

88
00:07:11,020 --> 00:07:17,460
したがって、実際のサーバーにコードを配布するときにその機能を失いたくないので、開発ワークフローと生産ワークフローの両方のモジュールとして表示されます。これは、両方の競合ファイルが保存され、自由に感じられるようにしますそれらを閉じます。

89
00:07:17,590 --> 00:07:23,530
&nbsp;

90
00:07:23,530 --> 00:07:27,180
&nbsp;

91
00:07:27,220 --> 00:07:33,470
これは私たちが編集する必要があるすべてのもので、ここであなたの設定を壊すかもしれない何か他のものを編集することに注意してください。

92
00:07:33,480 --> 00:07:34,270
&nbsp;

93
00:07:35,430 --> 00:07:45,030
APS-C SSをインポートするとその重要なことが変わりました。このCSAでは、ChiassonアプリにインポートされたコンポーネントがExxon-Mobileになっているため、実際にDCをこのCSAのクラスとしてスコープします。

94
00:07:45,090 --> 00:07:52,280
だからここでは、赤と太字のアプリケーションを宣言していれば、C Sの秋からインポートすることができます。

95
00:07:52,290 --> 00:08:00,920
また、すべてのインポートのインポートステートメントを調整する必要があります。KlaasのAPS-C

96
00:08:00,960 --> 00:08:08,340
SSからの名前はあなた次第です。

97
00:08:08,340 --> 00:08:08,610
あなたはStoutの名前をあなたの望むものにすることができます。

98
00:08:08,610 --> 00:08:10,820
OPICクラスです。なぜならオブジェクトオブジェクトであり、プロパティとしてクラスとしてDS Cを含むjavascriptオブジェクトであるからです。

99
00:08:10,820 --> 00:08:20,800
魔法のように聞こえる。

100
00:08:20,820 --> 00:08:22,380
それはまあまあですが、それは基本的に私たちCSのファイル内のC

101
00:08:22,410 --> 00:08:30,180
Sコードをjavascriptファイルで使用できるオブジェクトに変換するC Sローダーによって行われる魔法です。

102
00:08:30,270 --> 00:08:38,090
だから私たちはこの巨像の性質を持っています。

103
00:08:38,110 --> 00:08:40,580
&nbsp;

104
00:08:40,590 --> 00:08:49,800
これにより、ここでクラス名のようなクラスを使用し、ここで文字列を割り当てない場所に移動することができます。

105
00:08:49,800 --> 00:08:50,940
しかし、私たちがインポートしているクラスオブジェクトとそのアプリケーションに手を差し伸べてください。

106
00:08:51,240 --> 00:08:57,750
単にappという名前のプロパティ。

107
00:08:57,750 --> 00:08:59,930
これは、このクラスを参照して、そのクラスとそのスタイルをdiffに適用します。

108
00:09:00,050 --> 00:09:05,570
だから前になかったことだけ。

109
00:09:05,610 --> 00:09:07,260
しかし、今ではまったく異なる技術を使っています。

110
00:09:07,320 --> 00:09:11,290
今すぐD. C. もちろんローダーとしてのここでは本当の魔法はありません。

111
00:09:11,520 --> 00:09:16,160
代わりに、ここで起こっているのはDです。 C. のローダーはDを変換する。 C. のSクラス名。

112
00:09:16,170 --> 00:09:22,800
WePayのコンフリクトファイルで設定したローカルのident名前パターンを使用してCSSを設定します。基本的にクラス名を使用してjavascriptファイルのファイル名を見つけるか、クラスとランダムなハッシュをインポートしますユニークなCsを生成する。

113
00:09:22,800 --> 00:09:31,050
&nbsp;

114
00:09:31,080 --> 00:09:38,330
&nbsp;

115
00:09:38,330 --> 00:09:42,720
&nbsp;

116
00:09:42,720 --> 00:09:49,470
姓を尋ねたら、インポートしたこのjavascriptオブジェクトで生成したこれらの一意のクラス名をすべて格納し、プロパティ名があるプロパティに格納します。

117
00:09:49,530 --> 00:09:54,760
&nbsp;

118
00:09:54,770 --> 00:10:01,470
あなたのオリジナルのCクラス名としての私たちのように、ここでKlaasのアプリケーションのようなこれらのプロパティの値は、単にCのローダとして生成された一意のクラス名です。

119
00:10:01,470 --> 00:10:05,220
&nbsp;

120
00:10:05,370 --> 00:10:11,660
これは、もちろん、私たちのクラスをそこで調整する必要があるシーンの背後ではどのように動作するのでしょうか？そこには結合構文がありますが、単にクラスを読み込むだけのストリングをプッシュしません。

121
00:10:11,660 --> 00:10:20,690
&nbsp;

122
00:10:20,690 --> 00:10:22,610
&nbsp;

123
00:10:23,000 --> 00:10:28,970
文字列ではなく、APS-C

124
00:10:28,970 --> 00:10:36,800
SSからインポートするクラスオブジェクトのプロパティとしてA Cを参照するクラスがあります.SUSをモジュールとしてロック解除したため、これらのインポートステートメントを使用できます。

125
00:10:36,890 --> 00:10:40,940
ここでクラスクラスが一定であるため、ここで名前の問題が発生しました。

126
00:10:42,320 --> 00:10:47,510
だから私はこれら2つの割り当てられたクラスに名前をつけ、ここでそのすべての使用を置き換えます。

127
00:10:47,720 --> 00:10:55,070
&nbsp;

128
00:10:55,080 --> 00:11:02,530
ここで私はそれを使用する場所もここにプロパティを開示することは、実際には我々がインポートしているクラスを指しているだけです。

129
00:11:02,540 --> 00:11:03,330
こことここで同じです。

130
00:11:03,410 --> 00:11:05,770
これを保存して、アプリケーションをリロードしても機能するかどうかを見てみましょう。

131
00:11:06,290 --> 00:11:10,760
うまくいかないようです。

132
00:11:10,760 --> 00:11:12,380
私たちがこのクラスを見ていなければ、今日私たちのアプリケーションを検査します。

133
00:11:12,380 --> 00:11:17,950
&nbsp;

134
00:11:17,990 --> 00:11:23,780
その理由は、私たちが開発サーバーを再起動したことがないということです。しかし、私たちが行ったように構成を変更したら、それを実行しなければなりません。

135
00:11:23,780 --> 00:11:26,180
&nbsp;

136
00:11:26,210 --> 00:11:31,790
したがって、この実行を行うターミナルウィンドウでは、実行中のプロセスを終了し、NPMの起動を単に以前のように再開する必要があります。

137
00:11:31,880 --> 00:11:34,460
&nbsp;

138
00:11:34,460 --> 00:11:40,150
これはうまくいくはずですが、今度はこれらの新しい設定を考慮に入れて、再起動後にこのページをリロードします。

139
00:11:40,220 --> 00:11:41,990
&nbsp;

140
00:11:42,020 --> 00:11:49,040
ここでエラーが発生するのは、設定に誤りがあったからです。私はそれを言いましたが、ミスタイプしました。

141
00:11:49,040 --> 00:11:50,080
ベース64ではなく65。

142
00:11:50,090 --> 00:11:52,710
&nbsp;

143
00:11:52,940 --> 00:11:59,990
また、projの設定を保存すると、両方の競合が実行されている端末に戻り、プロセスを再起動して再起動します。

144
00:11:59,990 --> 00:12:05,290
そして、このエラーを修正してこれをもう一度リロードしてみましょう。

145
00:12:05,660 --> 00:12:09,190
これで、古いスタイルが適用されていることがわかります。

146
00:12:09,350 --> 00:12:12,850
&nbsp;

147
00:12:12,930 --> 00:12:20,220
私たちは4つの全ての屋台を見ることができますが、ここでは段落を更新しますが、人のための屋台は失われています。

148
00:12:20,220 --> 00:12:21,540
彼らはもうカードのようには見えません。

149
00:12:21,540 --> 00:12:23,630
今はまだコンポーネントを調整していないので正常です。

150
00:12:23,790 --> 00:12:26,870
私たちにとって重要なのは、ここでのこのスタイルは、私たちが全死に割当てる働きです。

151
00:12:27,030 --> 00:12:32,110
&nbsp;

152
00:12:32,250 --> 00:12:38,340
そして、あなたはその奇妙な名前が基本的にユニークな名前であることを見ています。なぜなら、それはまだブラウザで実行されているからです。

153
00:12:38,340 --> 00:12:39,270
&nbsp;

154
00:12:39,270 --> 00:12:46,230
&nbsp;

155
00:12:46,230 --> 00:12:55,050
しかし、これらの自動的に生成された一意の名前を持つことによって、このクラスだけがこのクラスを持ち、たとえあなたがこのアプリケーションを他の場所のクラスとして再利用しても、同じStolleyを取得することはありません。

156
00:12:55,050 --> 00:12:58,870
これはすべて動作しています。

157
00:12:59,340 --> 00:13:00,620
そして、配列にプッシュする赤と太字のクラスでも動作することがわかります。

158
00:13:00,930 --> 00:13:06,010
&nbsp;

159
00:13:06,030 --> 00:13:12,600
しかし、今ではそれをプロパティとしてアクセスすることで、人がこのように人を引き込むので、人が壊れてしまいます。

160
00:13:12,600 --> 00:13:13,110
そして、これはもはや明らかに機能しません。

161
00:13:13,140 --> 00:13:15,000
私たちはKlaas'sをその人の人からあなたが好きな名前にインポートする必要があります。

162
00:13:15,240 --> 00:13:21,710
だからストリングのような人はいないが、彼らは単純にクラースのドット・パーソンである。

163
00:13:21,720 --> 00:13:28,640
あなたは財産の名前としてあなたを持っています。

164
00:13:28,650 --> 00:13:32,850
それでは、私たちはカードの表情で古い設定に戻ります。

165
00:13:32,850 --> 00:13:39,830
最後に、このメディアクエリーを作成して、次の講義でこれを行うC

166
00:13:39,980 --> 00:13:46,710
Sモジュールでも、やり直しをしました。

167
00:13:46,890 --> 00:13:47,850
&nbsp;

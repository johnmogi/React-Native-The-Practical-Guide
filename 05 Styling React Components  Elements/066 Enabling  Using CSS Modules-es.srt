1
00:00:02,190 --> 00:00:08,640
En las últimas conferencias, aprendes acerca del radio, un paquete de una parte, que es muy popular y te

2
00:00:08,640 --> 00:00:12,780
permite usar estilos en línea con funciones como consultas en los medios.

3
00:00:12,780 --> 00:00:19,020
Esta es una forma de determinar si su Stahl es capaz de editarlos fácilmente y aún así utilizar funciones como los

4
00:00:19,020 --> 00:00:19,870
medios de Corry.

5
00:00:20,010 --> 00:00:21,610
No es la única manera sin embargo.

6
00:00:21,750 --> 00:00:27,270
¿No sería genial si un archivo C S S como tu persona lo hace SS?

7
00:00:27,270 --> 00:00:35,340
que el archivo componente JSE para que cualquiera de los Stahl que definimos aquí podría importarse y asignarse a los

8
00:00:35,340 --> 00:00:42,450
elementos en este componente y no anular Stults y otros componentes u otras partes de la aplicación.

9
00:00:42,450 --> 00:00:43,130
La persona Incluso si

10
00:00:43,290 --> 00:00:50,520
tuviéramos que compartir los nombres de las clases C S, esto es realmente posible y es posible en la configuración que usamos aquí.

11
00:00:50,520 --> 00:00:53,040
Podemos usar una característica llamada SEUS como módulos.

12
00:00:53,340 --> 00:00:56,720
Y aquí quiero mostrarte cómo usar set.

13
00:00:56,730 --> 00:00:59,450
Primero que nada deshazte del radio.

14
00:00:59,520 --> 00:01:02,390
Sin embargo, todavía puede encontrar el código anterior para descargar adjunto a este módulo.

15
00:01:02,400 --> 00:01:06,580
Me desharé de este estilo configurado aquí y

16
00:01:06,700 --> 00:01:13,920
ya no asignaré una lágrima y ya no envolveré mi persona exportando con radio.

17
00:01:13,950 --> 00:01:15,760
También iré a la apertura de la siguiente manera.

18
00:01:15,840 --> 00:01:18,670
Eliminar mis importaciones de radio allí eliminar mi envoltorio de raíz de estilo Tengo su alrededor de toda la aplicación.

19
00:01:18,780 --> 00:01:29,010
Quite el envoltorio de mi exportación hacia abajo para básicamente eliminar todos los rastros de radio y ahora también necesito

20
00:01:29,070 --> 00:01:35,580
quitar la parte donde sobrescribo el control deslizante o donde lo configuro.

21
00:01:35,580 --> 00:01:40,660
Porque eso ya no funcionará sin radio.

22
00:01:40,710 --> 00:01:43,470
Así que volvemos al mundo en el que estábamos antes de agregar el radio.

23
00:01:43,470 --> 00:01:47,280
Ahora quiero manejar todo lo que Frue tiene en

24
00:01:47,400 --> 00:01:55,710
el alcance de los archivos C S S y para hacerlo necesitamos ajustar la configuración del perno de nuestro proyecto.

25
00:01:55,710 --> 00:01:58,910
Ahora mencioné anteriormente en el curso que estamos usando

26
00:01:58,920 --> 00:02:06,540
scripts de DS para volver a actuar, que este es un paquete que nos expone todo el flujo de trabajo de construcción

27
00:02:06,600 --> 00:02:14,550
y que contravemos a la configuración, pudimos excavar en la carpeta de módulos de nodos y buscar este paquete y lo agregó allí.

28
00:02:14,550 --> 00:02:19,030
Pero hace algo que nunca debes hacer porque cada

29
00:02:19,290 --> 00:02:25,530
vez que vuelves a ejecutar la instalación de NPM, los cambios se sobrescribirán.

30
00:02:25,530 --> 00:02:27,200
Afortunadamente hay un comando que

31
00:02:27,210 --> 00:02:34,200
nos da acceso a la configuración, aunque cada uno marcado puede ejecutar el objeto de ejecución de NPM para básicamente convertirlo.

32
00:02:34,200 --> 00:02:38,440
Todo está administrado.

33
00:02:38,520 --> 00:02:39,500
Para mí, el proyecto de todo se gestiona para mí, pero ahora puedo editar el proyecto de configuración.

34
00:02:39,500 --> 00:02:46,590
No habrá un camino de regreso, pero no debería romperse, igual funcionará de la misma manera que antes.

35
00:02:46,620 --> 00:02:52,330
Pero puede agregar una configuración D.

36
00:02:52,470 --> 00:02:54,710
Por supuesto, esto se debe hacer con cuidado,

37
00:02:54,720 --> 00:03:00,650
ya que no se quiere establecer un descanso ahora lo haremos juntos aquí para desbloquear la función de C-s como módulos.

38
00:03:00,660 --> 00:03:04,950
Una nota importante si lo está usando bien para

39
00:03:04,950 --> 00:03:13,590
rastrear sus cambios, asegúrese de agregar y confirmar todos los cambios antes de ejecutar el comando de expulsión.

40
00:03:13,740 --> 00:03:15,710
No funcionará de otra manera.

41
00:03:15,720 --> 00:03:17,620
Con eso deberías abrir la terminal.

42
00:03:17,760 --> 00:03:19,770
De nuevo, este es el

43
00:03:19,800 --> 00:03:27,990
que está integrado en la ID eat y luego puede ejecutar ejecutar NPM expulsión aquí para expulsar la configuración.

44
00:03:27,990 --> 00:03:29,310
Ahora nos preguntan si queremos hacer eso porque no podemos volver a grabar.

45
00:03:29,310 --> 00:03:33,620
Por qué.

46
00:03:33,630 --> 00:03:34,530
Y terminamos.

47
00:03:34,950 --> 00:03:36,330
Y ahora, de repente, vemos nuevas carpetas, la carpeta de scripts y la carpeta de conflicto.

48
00:03:36,660 --> 00:03:42,360
usan bajo el capó Babel por ejemplo, es responsable de compilar iOS 6 a E.

49
00:03:42,540 --> 00:03:48,110
Ahora la carpeta de scripts tiene un script para cada comando que teníamos en

50
00:03:48,120 --> 00:03:53,880
el paquete truck chase y todos caen en la cuenta de que nuestra lista de

51
00:03:53,880 --> 00:03:59,610
dependencias se calmó bastante porque ahora vemos todo esto estas dependencias de desarrollo que se S. 5.

52
00:03:59,650 --> 00:04:01,990
No hay preocupaciones de que no profundizaremos en esa configuración.

53
00:04:02,010 --> 00:04:05,270
No lo ajustaremos.

54
00:04:05,280 --> 00:04:06,090
Todavía funcionará.

55
00:04:06,090 --> 00:04:07,770
Sin embargo, para nosotros, interesante en la carpeta de conflictos es el conflicto de WePay de la muerte y el conflicto de Wepa.

56
00:04:07,770 --> 00:04:14,520
Archivo parata donde Peg es básicamente para construir la herramienta de agrupamiento que se acostumbra a lo que se aplica.

57
00:04:14,550 --> 00:04:21,060
Todo tipo de transformaciones y optimizaciones en nuestros archivos y los agrupa, y

58
00:04:21,060 --> 00:04:28,050
como parte de este proceso, todo se ocupa de R C S falls.

59
00:04:28,050 --> 00:04:31,920
Recuerda que dije que su especificación web es capaz

60
00:04:32,050 --> 00:04:40,170
de analizar esta CSSA. Importar nuestro archivo javascript Bueno, ya que WePay es el responsable de esta página web es

61
00:04:40,240 --> 00:04:49,080
el lugar donde ahora también podemos ajustar la forma en que manejamos las fallas Cs y dónde podemos desbloquear esto. característica adicional.

62
00:04:49,080 --> 00:04:53,910
Me refería al uso de C-s como módulos para muertos y los datos de conflicto de la imagen web.

63
00:04:53,910 --> 00:04:59,730
El archivo Def nos desplazamos hacia abajo al módulo y luego al módulo donde puede ver a D. DO. La extensión de s aquí donde pruebas más

64
00:04:59,760 --> 00:05:10,280
ritziest de la siguiente manera.

65
00:05:10,280 --> 00:05:14,310
Allí no usamos este cargador y no necesitamos agregar eso y

66
00:05:14,390 --> 00:05:19,880
no deberíamos agregar esto, pero modificaremos las opciones aquí para el cargador s s.

67
00:05:19,880 --> 00:05:23,510
Allí estableceré los módulos para vernos como cargadores como una herramienta que simplemente analiza y puede palabras.

68
00:05:24,050 --> 00:05:31,130
Nuestro SPSS lo extrae y lo almacena y lo importa C-s como módulos.

69
00:05:31,140 --> 00:05:37,510
Una característica que te mostraré cómo usar en un segundo.

70
00:05:37,520 --> 00:05:41,210
Esta es una parte que establece los módulos en verdadero.

71
00:05:41,280 --> 00:05:44,780
También necesita agregar un nombre de identificación local con mayúscula I y mayúscula N.

72
00:05:44,780 --> 00:05:50,400
pero que al final es importante para sus estilos.

73
00:05:50,900 --> 00:05:58,100
Y ahora debe agregar aquí la siguiente cadena que puede parecer críptica

74
00:05:58,400 --> 00:06:00,600
Sus clases de siestas porque

75
00:06:00,620 --> 00:06:07,280
las clases obtienen nombres únicos por componente para que no se anulen entre sí.

76
00:06:07,310 --> 00:06:09,460
Aquí deberías usar corchetes.

77
00:06:09,680 --> 00:06:11,840
El nombre lo hará básicamente será tu s. do. s como nombre de clase subrayado subrayado local.

78
00:06:11,840 --> 00:06:19,250
Esto permitirá que el cargador de

79
00:06:19,250 --> 00:06:26,330
CA lo asigne a un componente local para que se ajuste básicamente y luego subrayar subrayar más

80
00:06:26,330 --> 00:06:35,570
corchetes hash colon base 64 5 básicamente le dará un hash único para asegurarse de no sobrescribir sus estilos en su solicitud.

81
00:06:35,570 --> 00:06:39,620
Ahora con eso simplemente copié la configuración aquí y vaya a desequilibrar Propofol o elija Conficker Prot.

82
00:06:40,680 --> 00:06:49,260
Allí también debe buscar el cargador C S S.

83
00:06:49,350 --> 00:06:52,770
Y verá que se ve un

84
00:06:53,680 --> 00:07:00,050
poco diferente allí y definitivamente no anule minimizar y el mapa Cirus.

85
00:07:00,080 --> 00:07:00,750
Pero como he copiado

86
00:07:00,840 --> 00:07:05,650
todo del archivo, sobrescribiré la importación de Lowder porque eso formaba parte de la integración africana y, básicamente, añadí monohulls true y mi nombre de identificación local.

87
00:07:05,650 --> 00:07:10,900
de trabajo de producción porque no queremos perder esa característica cuando enviamos el código en

88
00:07:11,020 --> 00:07:17,460
un servidor real con eso, asegúrese de que ambos archivos de conflicto estén guardados y siéntanse libres de ciérralos

89
00:07:17,590 --> 00:07:23,530
Entonces veremos como módulos tanto para nuestro flujo de trabajo de desarrollo como, por supuesto, para el flujo

90
00:07:23,530 --> 00:07:27,180
Eso es todo lo que necesitamos editar

91
00:07:27,220 --> 00:07:33,470
y tenga cuidado al editar cualquier otra cosa. Puede romper su configuración aquí.

92
00:07:33,480 --> 00:07:34,270
Con eso, una

93
00:07:35,430 --> 00:07:45,030
cosa importante cambió cuando importamos APS-C SS. Ahora, en realidad, el alcance de DC como clases en este CSA corresponde a este componente donde importamos a la aplicación Chiasson hace Exxon-Mobile.

94
00:07:45,090 --> 00:07:52,280
Entonces, si tenemos la aplicación declasse roja y en negrita, ahora podemos importarla de nuestra caída de C S S.

95
00:07:52,290 --> 00:08:00,920
También tenemos que modificar esa declaración de importación para todos los importadores

96
00:08:00,960 --> 00:08:08,340
de Klaas de APS-C SS. El nombre depende de usted.

97
00:08:08,340 --> 00:08:08,610
Podrías ponerle nombre a Stout, como quieras.

98
00:08:08,610 --> 00:08:10,820
OPIC clases porque será objeto objeto un objeto javascript que contiene DS C como clases como propiedades.

99
00:08:10,820 --> 00:08:20,800
Suena como magia.

100
00:08:20,820 --> 00:08:22,380
Lo es, pero es magia hecha por

101
00:08:22,410 --> 00:08:30,180
el cargador C S S, que nos permite a todos, que básicamente transforma el código C S en el archivo de nuestro CS en un objeto que podemos usar en el archivo javascript.

102
00:08:30,270 --> 00:08:38,090
Entonces ahora tenemos esta colosal propiedad.

103
00:08:38,110 --> 00:08:40,580
Esto nos permite ahora bajar

104
00:08:40,590 --> 00:08:49,800
al lugar donde usamos una clase como el nombre de la clase aquí y ya no asignamos una cadena aquí.

105
00:08:49,800 --> 00:08:50,940
Pero acceda al objeto de clases que estamos importando y su aplicación, por ejemplo.

106
00:08:51,240 --> 00:08:57,750
Simplemente una propiedad llamada aplicación.

107
00:08:57,750 --> 00:08:59,930
Esto hará referencia a esta clase y la aplicará y sus estilos a dis diff.

108
00:09:00,050 --> 00:09:05,570
Entonces, ¿qué no antes?

109
00:09:05,610 --> 00:09:07,260
Pero ahora usando una técnica totalmente diferente detrás de escena.

110
00:09:07,320 --> 00:09:11,290
Ahora D. DO. Como cargador, por supuesto no hace ninguna magia real aquí.

111
00:09:11,520 --> 00:09:16,160
En cambio, lo que está sucediendo aquí es que D. DO. El cargador de D transforma a D. DO. El nombre de la clase S.

112
00:09:16,170 --> 00:09:22,800
generar un Cs único.

113
00:09:22,800 --> 00:09:31,050
Configuramos el CSS en uno único usando el patrón de nombre de identificador local que configuramos en el archivo de conflicto de WePay donde

114
00:09:31,080 --> 00:09:38,330
esencialmente toma el nombre de clase para encontrar el nombre del archivo javascript o importas la clase y hash aleatorio para

115
00:09:38,330 --> 00:09:42,720
Pregunte el apellido y luego simplemente almacena todos los nombres de clase únicos

116
00:09:42,720 --> 00:09:49,470
que generó en este objeto javascript que importa y los almacena en las propiedades donde están los nombres de las propiedades.

117
00:09:49,530 --> 00:09:54,760
Tus C originales como nombres de clase, por lo que los valores de estas propiedades

118
00:09:54,770 --> 00:10:01,470
como aquí para la aplicación de Klaas son simplemente los nombres únicos de clase generados por C como s loader.

119
00:10:01,470 --> 00:10:05,220
unimos a nuestras cadenas, la sintaxis de las

120
00:10:05,370 --> 00:10:11,660
uniones puede permanecer allí, pero ya no presionamos cadenas simplemente empujamos las clases a leer.

121
00:10:11,660 --> 00:10:20,690
Así es como funciona esto detrás de la escena, por supuesto, todos tenemos que ajustar nuestras clases allí donde nos

122
00:10:20,690 --> 00:10:22,610
Y hay clases con código que

123
00:10:23,000 --> 00:10:28,970
se refieren a la A C que tiene clases no como cadenas sino como propiedades en esas clases

124
00:10:28,970 --> 00:10:36,800
objeto que, nuevamente, estamos importando de APS-C SS. Podemos usar estas declaraciones de importación debido al hecho de que hemos desbloqueado SEUS como módulos.

125
00:10:36,890 --> 00:10:40,940
Ahora tenemos un problema de nombre aquí porque tengo clases de clase constantes aquí.

126
00:10:42,320 --> 00:10:47,510
Así que nombraré estas dos clases asignadas y reemplazaré todos los usos aquí con eso.

127
00:10:47,720 --> 00:10:55,070
También allí, donde lo uso, de modo que divulgar propiedades

128
00:10:55,080 --> 00:11:02,530
aquí realmente solo se refiere a las clases que estamos importando.

129
00:11:02,540 --> 00:11:03,330
Lo mismo aquí y aquí.

130
00:11:03,410 --> 00:11:05,770
Ahorremos esto, veamos si todavía funciona si recargamos la aplicación.

131
00:11:06,290 --> 00:11:10,760
No parece funcionar

132
00:11:10,760 --> 00:11:12,380
Inspeccionamos nuestra aplicación aquí el día si no estamos viendo esta clase.

133
00:11:12,380 --> 00:11:17,950
La razón es que nunca reiniciamos nuestro servidor de desarrollo, pero

134
00:11:17,990 --> 00:11:23,780
si cambiamos la configuración como lo hicimos, tenemos que hacer eso.

135
00:11:23,780 --> 00:11:26,180
Entonces, en la ventana de la terminal donde

136
00:11:26,210 --> 00:11:31,790
funciona, tenemos que salir del proceso en ejecución y simplemente reiniciar NPM para comenzar igual que antes.

137
00:11:31,880 --> 00:11:34,460
Esto debería funcionar, pero ahora tendrá en

138
00:11:34,460 --> 00:11:40,150
cuenta esta nueva configuración y volverá a cargar esta página una vez que se haya reiniciado.

139
00:11:40,220 --> 00:11:41,990
Ahora obtenemos un error aquí

140
00:11:42,020 --> 00:11:49,040
porque cometí un error en la configuración que debería estar basada 64 Supongo que lo dije pero lo escribí mal.

141
00:11:49,040 --> 00:11:50,080
Base 64 no 65.

142
00:11:50,090 --> 00:11:52,710
Y también en la configuración de proj, ambos conflictos

143
00:11:52,940 --> 00:11:59,990
se guardan en esa terminal donde se ejecuta y la gente comienza con el proceso y se reinicia porque volvimos a cambiar la configuración.

144
00:11:59,990 --> 00:12:05,290
Y ahora recarguemos esto una vez más con ese error corregido.

145
00:12:05,660 --> 00:12:09,190
Ahora ves que los estilos antiguos se están aplicando.

146
00:12:09,350 --> 00:12:12,850
Vemos todos los puestos de los

147
00:12:12,930 --> 00:12:20,220
cuatro, incluida la actualización, un párrafo, pero los puestos de las personas están perdidos.

148
00:12:20,220 --> 00:12:21,540
Ya no se parecen a las cartas.

149
00:12:21,540 --> 00:12:23,630
Ahora eso es normal porque aún no hemos ajustado ese componente.

150
00:12:23,790 --> 00:12:26,870
Importante para nosotros este estilo aquí está funcionando y lo asignamos a la muerte completa.

151
00:12:27,030 --> 00:12:32,110
Y ves ese nombre extraño que básicamente es un nombre único

152
00:12:32,250 --> 00:12:38,340
porque sigue siendo c como el que se está ejecutando en el navegador.

153
00:12:38,340 --> 00:12:39,270
Pero al

154
00:12:39,270 --> 00:12:46,230
tener este nombre único generado automáticamente, solo este div tiene esta clase e incluso si reutilizara esta aplicación

155
00:12:46,230 --> 00:12:55,050
Vidente como clase en cualquier otro lugar de la aplicación, no obtendríamos el mismo Stolley porque está limitado al componente donde lo importamos.

156
00:12:55,050 --> 00:12:58,870
Entonces esto está funcionando.

157
00:12:59,340 --> 00:13:00,620
Y ves que también funciona para la clase roja y negrita que empujamos a la matriz.

158
00:13:00,930 --> 00:13:06,010
Pero ahora, al acceder a ella como

159
00:13:06,030 --> 00:13:12,600
propiedades, la persona está rota porque todavía importamos personas así.

160
00:13:12,600 --> 00:13:13,110
Y esto claramente ya no funciona.

161
00:13:13,140 --> 00:13:15,000
Necesitamos importar la persona de Klaas allí o cualquier otro nombre que le guste y ahora asignarlo como tal.

162
00:13:15,240 --> 00:13:21,710
Así que no se trata de una persona como una cuerda, sino que simplemente son la persona de puntos de Klaas que usa como sub.

163
00:13:21,720 --> 00:13:28,640
Usted tiene su como un nombre fuera de la propiedad.

164
00:13:28,650 --> 00:13:32,850
Y con eso ahora ves que volvemos a la configuración anterior con nuestro aspecto de tarjeta.

165
00:13:32,850 --> 00:13:39,830
Ahora, finalmente, hagamos esa consulta de medios y si hemos reformulado el trabajo

166
00:13:39,980 --> 00:13:46,710
también con los módulos de C S, haremos esto en la próxima conferencia.

167
00:13:46,890 --> 00:13:47,850
&nbsp;

1
00:00:02,190 --> 00:00:08,640
Over the last lectures you learn about radium, one third-party package which is very popular which allows

2
00:00:08,640 --> 00:00:12,780
you to use inline styles with features like media queries.

3
00:00:12,780 --> 00:00:19,020
Now that's one way of scoping your styles, being able to easily edit them and still use features like

4
00:00:19,020 --> 00:00:19,870
media queries,

5
00:00:20,010 --> 00:00:21,610
it's not the only way though.

6
00:00:21,750 --> 00:00:27,270
Wouldn't it be great if a css file like the person.css could be scoped to

7
00:00:27,270 --> 00:00:35,340
the person.js component file, so that whichever styles we define in here could be imported and

8
00:00:35,340 --> 00:00:42,450
assigned to elements in this component and wouldn't overwrite styles in other components or other parts

9
00:00:42,450 --> 00:00:43,130
of the app

10
00:00:43,290 --> 00:00:50,520
even if we were to share the names of the css classes. This is actually possible and it's actually

11
00:00:50,520 --> 00:00:53,040
possible in the setup we use here.

12
00:00:53,340 --> 00:00:56,720
We can use a feature named css modules

13
00:00:56,730 --> 00:00:59,450
and here I want to show you how to use that.

14
00:00:59,520 --> 00:01:02,390
First of all, I'll get rid of radium,

15
00:01:02,400 --> 00:01:06,580
you can still find the old code for download attached to this module though,

16
00:01:06,700 --> 00:01:13,920
I'll get rid of this style set up here and no longer assign it here and no longer wrap my person export

17
00:01:13,950 --> 00:01:15,760
with radium.

18
00:01:15,840 --> 00:01:18,670
I will also go to the app.js file,

19
00:01:18,780 --> 00:01:29,010
remove my radium imports there, remove my style root wrapper I have here around my entire application,

20
00:01:29,070 --> 00:01:35,580
remove the wrapper of my export down there, basically remove all traces of radium and now I also need

21
00:01:35,580 --> 00:01:40,660
to remove the part where I overwrite hover or where I set it

22
00:01:40,710 --> 00:01:43,470
because that will no longer work without radium,

23
00:01:43,470 --> 00:01:47,280
so we're back to the world we were in before we added radium.

24
00:01:47,400 --> 00:01:55,710
Now I want to handle everything through scoped css files and to do that, we actually need to tweak the built

25
00:01:55,710 --> 00:01:58,910
configuration of our project.

26
00:01:58,920 --> 00:02:06,540
Now I mentioned earlier in the course that we're using these react scripts, that this is a package which

27
00:02:06,600 --> 00:02:14,550
exposes the whole build workflow to us and we can't really add it to the configuration. We could dig into the

28
00:02:14,550 --> 00:02:19,030
node modules folder, search for this package and edit it there,

29
00:02:19,290 --> 00:02:25,530
but this is something you should never do, because every time you rerun npm install, your changes will be

30
00:02:25,530 --> 00:02:27,200
overwritten.

31
00:02:27,210 --> 00:02:34,200
Thankfully, there is a command which gives us access to the configuration though, eject. You can

32
00:02:34,200 --> 00:02:38,440
run npm run eject to basically convert your

33
00:02:38,520 --> 00:02:39,500
everything is managed

34
00:02:39,500 --> 00:02:46,590
for me project into everything is managed for me but I can edit the configuration project. Now

35
00:02:46,620 --> 00:02:52,330
there won't be a way back but it shouldn't break, it will still work in the same way it did before

36
00:02:52,470 --> 00:02:54,710
but you can then edit the configuration.

37
00:02:54,720 --> 00:03:00,650
Of course, this should be done with care because you don't want a break to set up. Now we will do it together

38
00:03:00,660 --> 00:03:04,950
here to unlock the feature of css modules.

39
00:03:04,950 --> 00:03:13,590
One important note if you're using git to track your changes, make sure you add and commit all changes

40
00:03:13,740 --> 00:03:15,710
before you run the eject command,

41
00:03:15,720 --> 00:03:17,620
it will not work otherwise.

42
00:03:17,760 --> 00:03:19,770
With that you should open the terminal,

43
00:03:19,800 --> 00:03:27,990
again this is the one integrated into the IDE and then you can run npm run eject here to eject the

44
00:03:27,990 --> 00:03:29,310
configuration.

45
00:03:29,310 --> 00:03:33,620
Now we're getting asked if we want to do that because we can't go back, I'll type

46
00:03:33,630 --> 00:03:34,530
Y

47
00:03:34,950 --> 00:03:36,330
and we're done.

48
00:03:36,660 --> 00:03:42,360
And now, all of a sudden we see new folders, the scripts folder and the config folder.

49
00:03:42,540 --> 00:03:48,110
Now the scripts folder has one script for each command we had in the package.js file, you

50
00:03:48,120 --> 00:03:53,880
also see that our list of dependencies grew by quite a lot because now we see all these

51
00:03:53,880 --> 00:03:59,610
development dependencies which are used under the hood, Babel for example is responsible for compiling

52
00:03:59,650 --> 00:04:01,990
ES6 to ES5.

53
00:04:02,010 --> 00:04:05,270
Now no worries, we won't dive deeply into that configuration,

54
00:04:05,280 --> 00:04:06,090
we won't tweak it,

55
00:04:06,090 --> 00:04:07,770
it will still work.

56
00:04:07,770 --> 00:04:14,520
However for us interesting in the config folder is the webpack.config.dev and webpack.config.prod

57
00:04:14,550 --> 00:04:21,060
file. Webpack is basically the build, the bundling tool which gets used, which applies

58
00:04:21,060 --> 00:04:28,050
all kinds of transformations and optimizations on our files and bundles them together and as part of

59
00:04:28,050 --> 00:04:31,920
this process, it also takes care about our css files.

60
00:04:32,050 --> 00:04:40,170
Remember that I said that it's webpack which is able to parse this css import in our javascript file. Well

61
00:04:40,240 --> 00:04:49,080
since webpack is the one responsible for this, webpack is the place where we can now also adjust the way

62
00:04:49,080 --> 00:04:53,910
we handle css files and where we can unlock this extra feature

63
00:04:53,910 --> 00:04:59,730
I was referring to using css modules. For that and the webpack.config.dev

64
00:04:59,760 --> 00:05:10,280
file, we should scroll down to module and then down to the module where you can spot the css extension

65
00:05:10,280 --> 00:05:14,310
here where you test for css files.

66
00:05:14,390 --> 00:05:19,880
There we then use these css loader and we don't need to edit that and we shouldn't edit this but we will

67
00:05:19,880 --> 00:05:23,510
tweak the options here for the css loader.

68
00:05:24,050 --> 00:05:31,130
There, I will set modules to true, css loader is a tool which simply parses and converts

69
00:05:31,140 --> 00:05:37,510
our css, extracts it and store is it and it supports css modules,

70
00:05:37,520 --> 00:05:41,210
a feature I will show you how to use in a second.

71
00:05:41,280 --> 00:05:44,780
This is one part, setting modules to true

72
00:05:44,780 --> 00:05:50,400
you also need to add a localIdentName with a capital I and capital N

73
00:05:50,900 --> 00:05:58,100
and now you should add the following string here which might look cryptic but which in the end is important

74
00:05:58,400 --> 00:06:00,600
for your styles,

75
00:06:00,620 --> 00:06:07,280
your css classes getting unique names per component so that that don't overwrite

76
00:06:07,310 --> 00:06:09,460
each other application wide.

77
00:06:09,680 --> 00:06:11,840
Here you should use square brackets,

78
00:06:11,840 --> 00:06:19,250
name, this will basically be your css class name. __local,

79
00:06:19,250 --> 00:06:26,330
this will allow a css loader to assign it to a local component, to scope it basically and then

80
00:06:26,330 --> 00:06:35,570
__[hash:base64:5], this will basically give it a unique hash to make

81
00:06:35,570 --> 00:06:39,620
sure you don't overwrite your styles across your application.

82
00:06:40,680 --> 00:06:49,260
Now with that, simply copy that set up here and go to the config prod folder, webpack.config.prod,

83
00:06:49,350 --> 00:06:52,770
there you should also search for the css loader

84
00:06:53,680 --> 00:07:00,050
and you will see that it looks a bit different there and definitely don't overwtite minimize and source

85
00:07:00,080 --> 00:07:00,750
map

86
00:07:00,840 --> 00:07:05,650
but since I copied everything from the other file, I will overwrite import loaders because that was part of

87
00:07:05,650 --> 00:07:10,900
the other configuration and basically add modules through in my localIdentName,

88
00:07:11,020 --> 00:07:17,460
so that we use css modules for both our development workflow and of course to production workflow

89
00:07:17,590 --> 00:07:23,530
because we don't want to lose that feature when we ship the code on a real server. With that, make sure

90
00:07:23,530 --> 00:07:27,180
both coonfig files are saved and feel free to close them,

91
00:07:27,220 --> 00:07:33,470
that's everything we need to edit and be careful about editing anything else, you might break your set

92
00:07:33,480 --> 00:07:34,270
up here.

93
00:07:35,430 --> 00:07:45,030
With that one important thing changed when we import app.css, It will now actually scope the css classes

94
00:07:45,090 --> 00:07:52,280
in this css file to this component where we import it, to app.js in this example.

95
00:07:52,290 --> 00:08:00,920
So here if we have the classes app, red and bold, we can now import them from our css file,

96
00:08:00,960 --> 00:08:08,340
we also need to tweak that import statement there for all import classes from app.css, this name is up to

97
00:08:08,340 --> 00:08:08,610
you,

98
00:08:08,610 --> 00:08:10,820
you could name it styles, whatever you want.

99
00:08:10,820 --> 00:08:20,800
I'll pick classes because it will be object, a javascript object containing these css classes as properties,

100
00:08:20,820 --> 00:08:22,380
sounds like magic,

101
00:08:22,410 --> 00:08:30,180
it kind of is but it is magic done by the css loader which allows us or which basically transforms

102
00:08:30,270 --> 00:08:38,090
the css code in our css file to an object we can use in the javascript file.

103
00:08:38,110 --> 00:08:40,580
So now we got this classes property,

104
00:08:40,590 --> 00:08:49,800
this allows us to now go down to the place where we use a class like here class name and no longer assign

105
00:08:49,800 --> 00:08:50,940
a string here

106
00:08:51,240 --> 00:08:57,750
but reach out to the classes object we are importing and there app for example,

107
00:08:57,750 --> 00:08:59,930
simply a property named app,

108
00:09:00,050 --> 00:09:05,570
This will refer to this class and apply it and its styles to this div.

109
00:09:05,610 --> 00:09:07,260
So just what we did before

110
00:09:07,320 --> 00:09:11,290
but now using a totally different technique behind the scenes.

111
00:09:11,520 --> 00:09:16,160
Now the css loader of course doesn't do any real magic here,

112
00:09:16,170 --> 00:09:22,800
instead what's happening here is that the css loader transforms the css class name

113
00:09:22,800 --> 00:09:31,050
we set up in the css file into a unique one using this localIdentName pattern we set up in the webpack

114
00:09:31,080 --> 00:09:38,330
config file where it essentially takes the class name we defined, the file name of the javascript file

115
00:09:38,330 --> 00:09:42,720
where you import a class and some random hash to generate a unique css

116
00:09:42,720 --> 00:09:49,470
class name and then it simply stores all these unique class names it generated in this javascript

117
00:09:49,530 --> 00:09:54,760
object you import, and it stores them in the properties where the property names are

118
00:09:54,770 --> 00:10:01,470
your original css class names. So the values of these properties like here for a classes app are

119
00:10:01,470 --> 00:10:05,220
simply the unique class names generated by css loader,

120
00:10:05,370 --> 00:10:11,660
this is how this works behind the scenes. Of course we also need to adjust our classes down there where

121
00:10:11,660 --> 00:10:20,690
we join our strings. This join syntax can stay there but we no longer push strings, we simply push

122
00:10:20,690 --> 00:10:22,610
classes red

123
00:10:23,000 --> 00:10:28,970
and there classes bold referring to the css classes not as strings but as properties on

124
00:10:28,970 --> 00:10:36,800
these classes object which again we're importing from app.css. We can use these imports statement because

125
00:10:36,890 --> 00:10:40,940
of the fact that we unlocked css modules.

126
00:10:42,320 --> 00:10:47,510
Now we got a name issue here because I have a constant named classes here.

127
00:10:47,720 --> 00:10:55,070
So I will name these two assigned classes and replace all the usages here with that and

128
00:10:55,080 --> 00:11:02,530
also down there where I use it so that these classes property here really only refers to the classes we're

129
00:11:02,540 --> 00:11:03,330
importing,

130
00:11:03,410 --> 00:11:05,770
the same here and here.

131
00:11:06,290 --> 00:11:10,760
Let's save this and let's see if it still works if we reload the application,

132
00:11:10,760 --> 00:11:12,380
doesn't seem to work.

133
00:11:12,380 --> 00:11:17,950
We inspect our application here on the div, we're not seeing this class,

134
00:11:17,990 --> 00:11:23,780
the reason for it is is that we never restarted our development server but if we changed the configuration

135
00:11:23,780 --> 00:11:26,180
as we did, we have to do that.

136
00:11:26,210 --> 00:11:31,790
So in the terminal window where this is running we have to quit the running process and simply restart

137
00:11:31,880 --> 00:11:34,460
npm start. Just as before

138
00:11:34,460 --> 00:11:40,150
this should work but now it will take these new configuration into account and reload this page once

139
00:11:40,220 --> 00:11:41,990
it is done restarting.

140
00:11:42,020 --> 00:11:49,040
Now we get an error here because I made an error on the configuration, should be base 64 I guess I said

141
00:11:49,040 --> 00:11:50,080
it but I mistyped,

142
00:11:50,090 --> 00:11:52,710
base 64 not 65

143
00:11:52,940 --> 00:11:59,990
and also in the prod configuration. Save both configs, go back to that terminal where you run npm

144
00:11:59,990 --> 00:12:05,290
start with the process and restart because we changed the setup again,

145
00:12:05,660 --> 00:12:09,190
and now let's reload this one more time with that error are fixed.

146
00:12:09,350 --> 00:12:12,850
Now you see the old styles are getting applied,

147
00:12:12,930 --> 00:12:20,220
We see all the styles from before including the update here for the paragraph but the styles for

148
00:12:20,220 --> 00:12:21,540
the persons are lost,

149
00:12:21,540 --> 00:12:23,630
they are no longer looking like cards.

150
00:12:23,790 --> 00:12:26,870
Now that's normal because we haven't adjusted that component yet.

151
00:12:27,030 --> 00:12:32,110
Important for us, this style here is working which we assign to the whole div

152
00:12:32,250 --> 00:12:38,340
and you see that strange name? That basically is a unique name because it's still css running

153
00:12:38,340 --> 00:12:39,270
in the browser

154
00:12:39,270 --> 00:12:46,230
but by having these automatically generated unique name, only this div has this class and even if you

155
00:12:46,230 --> 00:12:55,050
were to reuse this app.css class anywhere else in the app, we wouldn't get the same styling because

156
00:12:55,050 --> 00:12:58,870
it's scoped to the component where we import it.

157
00:12:59,340 --> 00:13:00,620
So this is all working

158
00:13:00,930 --> 00:13:06,010
and you see it also works for the red and bold class which we push to the array

159
00:13:06,030 --> 00:13:12,600
but now, by accessing it as properties the person is broken because there we still import person like

160
00:13:12,600 --> 00:13:13,110
this

161
00:13:13,140 --> 00:13:15,000
and this clearly doesn't work anymore.

162
00:13:15,240 --> 00:13:21,710
We need to import classes from person there to or any other name you like and now assign it as such,

163
00:13:21,720 --> 00:13:28,640
so not person as a string but they're simply classes.person using the css that

164
00:13:28,650 --> 00:13:32,850
you have here as the name of the property,

165
00:13:32,850 --> 00:13:39,830
and with that now you see we're back to the old set up with our card look.

166
00:13:39,980 --> 00:13:46,710
Now finally let's make that media query and that hover state work too with the css modules. We'll do this

167
00:13:46,890 --> 00:13:47,850
in the next lecture.

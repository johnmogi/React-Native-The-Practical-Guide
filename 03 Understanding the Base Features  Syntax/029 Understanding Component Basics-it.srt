1
00:00:02,380 --> 00:00:07,900
Nell'ultima lezione ti ho guidato attraverso la struttura delle cartelle che è stata creata da Crea reagire.

2
00:00:08,020 --> 00:00:09,650
E abbiamo modificato il nostro apt.

3
00:00:09,670 --> 00:00:10,730
JS caduta.

4
00:00:10,840 --> 00:00:13,620
Passiamo ora più in profondità a ciò che vediamo qui.

5
00:00:13,690 --> 00:00:21,190
Vediamo un componente di re-act mentre spiegavo che re-act riguarda la creazione di componenti di elementi HVM fondamentalmente

6
00:00:21,400 --> 00:00:26,200
personalizzati che potreste dire che potete usare per costruire la vostra applicazione.

7
00:00:26,200 --> 00:00:33,280
Questo componente app viene effettivamente utilizzato il prossimo file js in cui lo si esegue nel posto di questo

8
00:00:33,340 --> 00:00:34,030
elemento root.

9
00:00:34,210 --> 00:00:39,450
E potremmo rendere un normale elemento femminile invecchiato qui per testare per esempio.

10
00:00:39,480 --> 00:00:40,240
Questo funzionerebbe.

11
00:00:40,240 --> 00:00:42,570
Questo ora non è un componente re-act.

12
00:00:42,610 --> 00:00:45,640
Se salvi questo, vedo Wintec di questa età.

13
00:00:46,000 --> 00:00:49,360
Ma ovviamente non abbiamo una vera applicazione di re-act.

14
00:00:49,470 --> 00:00:55,860
Stiamo rendendo un normale elemento HVM ma non stiamo rendendo il nostro componente re-act.

15
00:00:55,870 --> 00:01:02,800
Ora potresti ovviamente usare più reazioni su un riproduttore e rendere tutto il codice HP che desideri utilizzare

16
00:01:02,860 --> 00:01:03,940
nella tua app.

17
00:01:04,030 --> 00:01:07,530
Non è proprio il modo in cui crei le tue app di re-act.

18
00:01:07,810 --> 00:01:15,760
Generalmente si esegue il rendering di un componente radice nel componente dell'app ma è possibile denominarlo come si desidera

19
00:01:15,820 --> 00:01:16,840
un componente root.

20
00:01:16,840 --> 00:01:24,150
Nel nostro caso è il componente tiap chiamato app e lì si annidano tutti gli altri componenti.

21
00:01:24,150 --> 00:01:30,050
Potrebbe essere necessaria la tua applicazione e ovviamente questi componenti possono anche essere annidati l'uno nell'altro.

22
00:01:30,250 --> 00:01:37,300
Ma fino in cima hai solo un componente root che puoi raggiungere su più nodi

23
00:01:37,330 --> 00:01:45,010
nel tuo HMO fall e montare diversi componenti root per diverse app di re-act nello stesso progetto.

24
00:01:45,010 --> 00:01:47,950
Sarebbe possibile ma non è quello che facciamo qui.

25
00:01:47,980 --> 00:01:52,810
Alla fine, ovviamente, è possibile semplicemente replicare ciò che si apprende in questo corso per

26
00:01:52,930 --> 00:01:55,270
più applicazioni in uno nello stesso archivio HTL.

27
00:01:55,540 --> 00:01:59,170
Ma atteniamoci all'utilizzo generale o tipico di reagire.

28
00:01:59,170 --> 00:02:04,450
Abbiamo questo componente app che è quello di trovare un file JS di approfondimento.

29
00:02:04,450 --> 00:02:11,140
Qui vediamo uno dei due modi per definire un componente reattivo, creiamo una classe javascript con

30
00:02:11,140 --> 00:02:18,730
la parola chiave class e quindi usiamo la parola chiave extents per ereditare da questo oggetto componente o classe.

31
00:02:18,730 --> 00:02:25,120
Per essere precisi che viene importato qui dalla libreria del re-act.

32
00:02:25,120 --> 00:02:33,250
importiamo due cose re-act che è il responsabile o richiesto per rendere qualsiasi cosa al DOM.

33
00:02:33,250 --> 00:02:34,030
In realtà

34
00:02:34,030 --> 00:02:37,750
Dobbiamo sempre importarlo in un file in cui definiamo un componente.

35
00:02:38,080 --> 00:02:43,300
E naturalmente la classe del componente stesso ti mostrerà presto un modo diverso di

36
00:02:43,330 --> 00:02:44,370
creare i componenti.

37
00:02:44,470 --> 00:02:46,800
Ora questa classe ha un metodo.

38
00:02:46,930 --> 00:02:48,130
Il metodo di rendering.

39
00:02:48,220 --> 00:02:54,940
Deve esserlo perché re-act chiamerà questo metodo per rendere qualcosa sullo schermo.

40
00:02:55,230 --> 00:02:57,400
C'è un lavoro importante.

41
00:02:57,580 --> 00:03:06,370
Ogni componente di re-act deve fare restituire o rendere qualche codice HVM else che può essere reso

42
00:03:06,440 --> 00:03:08,240
a Dom sullo schermo.

43
00:03:08,470 --> 00:03:12,160
Puoi fare altre cose lì per raggiungere internet.

44
00:03:12,160 --> 00:03:17,320
Alcuni calcoli ascoltano gli eventi di qualsiasi tipo nella tua applicazione.

45
00:03:17,320 --> 00:03:25,020
Vedremo tutto questo in quel corso, ma devi sempre rendere qualche messaggio HVM all'alba.

46
00:03:25,030 --> 00:03:28,140
Questo è così importante da tenere a mente.

47
00:03:28,330 --> 00:03:34,440
Esportiamo quindi questa classe AB come l'esportazione predefinita di questo file.

48
00:03:34,510 --> 00:03:41,020
che se importi questo intero file dovrai semplicemente importare questa classe perché è l'esportazione predefinita.

49
00:03:41,020 --> 00:03:43,280
Funziona ESX e significa semplicemente

50
00:03:43,660 --> 00:03:50,210
Li usiamo nell'indice Jaspal in cui importiamo nuovamente l'app dal file dell'app.

51
00:03:50,230 --> 00:03:56,840
Omissione di questa estensione perché viene aggiunta automaticamente dal flusso di lavoro di generazione per i file javascript.

52
00:03:57,260 --> 00:04:02,910
Il nome apt qui è scelto arbitrariamente, ma in genere si usa il nome del componente.

53
00:04:02,980 --> 00:04:08,140
Si utilizza anche nel file e quindi si utilizza anche come nome di file.

54
00:04:08,140 --> 00:04:09,320
Una nota a margine.

55
00:04:09,400 --> 00:04:16,890
Potresti anche vedere questi componenti con Dot J come X come estensione di file invece di J S.

56
00:04:16,930 --> 00:04:19,970
Il motivo per questo è il codice qui.

57
00:04:20,260 --> 00:04:24,410
Mi sono riferito come h t m l che è tornato.

58
00:04:24,760 --> 00:04:27,250
Ma alla fine questo non è HVM L.

59
00:04:27,310 --> 00:04:32,880
Sembra, ma è J come X, quindi è javascript.

60
00:04:32,980 --> 00:04:39,340
Guardando un po 'diverso e questo può essere fonte di confusione all'inizio quando stai imparando a reagire, questa potrebbe

61
00:04:39,340 --> 00:04:46,720
essere una delle cose più confuse che è davvero importante sapere è che questo è solo un po' di zucchero sintattico inventato

62
00:04:46,720 --> 00:04:52,630
dal team di re-act e possiamo scriverlo in un file javascript a causa del flusso di lavoro di

63
00:04:52,630 --> 00:04:54,330
generazione che stiamo utilizzando qui.

64
00:04:54,340 --> 00:04:58,940
Fonderà automaticamente automaticamente i piloti su javascript e dnt validi.

65
00:04:59,350 --> 00:05:07,190
Non è collegato al Falak in cui lo stai usando e Dot James e Dot James Ex-Files e convention al giorno d'oggi è praticamente

66
00:05:07,330 --> 00:05:12,660
sempre per te che usi sempre punto J come falso, motivo per cui lo facciamo anche qui.

67
00:05:13,030 --> 00:05:22,600
Ed è semplicemente il codice o una sintassi che possiamo usare per scrivere la posta HVM tra virgolette, mentre alla

68
00:05:22,660 --> 00:05:25,310
fine non scrivere sembra confondere.

69
00:05:25,420 --> 00:05:29,890
Lascia che ti mostri in cosa è effettivamente compilato nella prossima lezione.

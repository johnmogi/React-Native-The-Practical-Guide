1
00:00:02,200 --> 00:00:09,730
En la última conferencia eché un vistazo a qué genio X realmente es y es tan importante entender esto.

2
00:00:09,990 --> 00:00:14,850
Ahora, en esta conferencia, quiero resaltar algunas de las restricciones que enfrentamos.

3
00:00:14,850 --> 00:00:21,720
Por ejemplo, este nombre de clase aquí James x parece claramente htmln, debería permitirnos escribir el

4
00:00:21,720 --> 00:00:28,680
código HVM Elish en nuestros archivos javascript, ya que no es un archivo javascript y dado

5
00:00:28,680 --> 00:00:36,780
que es javascript, algunas palabras pueden usarse CLOS por ejemplo lo cual usaríamos en hml normal para asignar acceso

6
00:00:36,780 --> 00:00:41,620
como clase no se puede usar porque reservo la palabra en javascript.

7
00:00:41,700 --> 00:00:45,360
Ya lo usamos aquí por cierto para crear una nueva clase.

8
00:00:45,360 --> 00:00:48,210
Es por eso que tenemos que usar el nombre de clase.

9
00:00:48,210 --> 00:00:56,140
Todos estos elementos que puede usar aquí como Def y H one en realidad son administrados o proporcionados por la

10
00:00:56,160 --> 00:00:57,090
biblioteca reaccionar.

11
00:00:57,360 --> 00:01:04,240
No estamos usando el HVM real Voy a volver a acceder al texto convirtiéndolos detrás de las escenas y volver

12
00:01:04,250 --> 00:01:07,970
a actuar el encuentra los atributos entre comillas que debería decir.

13
00:01:08,100 --> 00:01:13,620
Podemos definir todos estos elementos y no tenemos el atributo de clase como tenemos en el elemento

14
00:01:13,620 --> 00:01:14,970
h m l regular.

15
00:01:15,120 --> 00:01:18,070
Tenemos el atributo de nombre de clase aquí.

16
00:01:18,180 --> 00:01:22,930
Agregar una C es la clase que puede ver en nuestro código final.

17
00:01:23,000 --> 00:01:27,180
Esto se traduce a la clase aunque aquí no es el nombre de la clase.

18
00:01:27,210 --> 00:01:33,850
Una vez que se ha procesado, una restricción numérica que enfrentamos está muerta.

19
00:01:33,870 --> 00:01:35,760
Cuando devolvemos algo aquí.

20
00:01:36,030 --> 00:01:42,940
Digamos que todos queremos devolver un encabezado de número que realmente no podemos hacer aquí.

21
00:01:43,140 --> 00:01:47,360
Nuestra expresión GSX debe tener un elemento raíz.

22
00:01:47,370 --> 00:01:51,670
Ahora con el re-acto 16 se afloja.

23
00:01:52,080 --> 00:01:58,450
Y veremos los puntajes que en realidad podemos devolver elementos adyacentes al final.

24
00:01:58,530 --> 00:02:06,780
a sus oponentes y desea agregar CCS S-Class, que es responsable de diseñar el elemento raíz como lo hacemos aquí

25
00:02:06,820 --> 00:02:13,170
Una característica típica y una práctica recomendada típica es incluir todo en un elemento raíz por

26
00:02:13,170 --> 00:02:18,050
componente, aunque esto también tiene sentido ya que normalmente quiere dar estilo

27
00:02:18,060 --> 00:02:23,760
Por lo general, anida todo en un único elemento raíz que devuelve.

28
00:02:23,760 --> 00:02:29,800
Y si te estás preguntando acerca de estos paréntesis aquí, estos son simplemente uso para que podamos subir a HVM

29
00:02:29,820 --> 00:02:36,570
L y siempre estoy diciendo H. METRO. S. Pero tenga en cuenta que es

30
00:02:36,570 --> 00:02:42,780
el javascript de salida de James para que pueda devolver este HVM todo el código bien estructurado en múltiples líneas sin recibir errores.

31
00:02:42,780 --> 00:02:44,830
Es por eso que usamos los paréntesis.

32
00:02:45,120 --> 00:02:51,020
Entonces, si pudiera agregar un párrafo aquí, digo que esto realmente funciona.

33
00:02:51,450 --> 00:02:53,220
Y eso está cerca de.

34
00:02:53,460 --> 00:02:56,450
Ahora con eso vemos ese párrafo aquí también.

35
00:02:56,540 --> 00:03:02,370
Y echamos un vistazo a algunas de las restricciones o aspectos a tener en cuenta al usar GSX porque

36
00:03:02,410 --> 00:03:03,730
nuevamente es una HMO.

37
00:03:03,810 --> 00:03:07,140
Pero en la mayoría de los casos realmente funciona igual.

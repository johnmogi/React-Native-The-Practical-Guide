1
00:00:02,130 --> 00:00:07,990
&nbsp;

2
00:00:07,990 --> 00:00:15,400
&nbsp;

3
00:00:15,400 --> 00:00:18,770
最後の講義では、アプリケーションのスタイリングのさまざまな方法があると言いましたが、このボタンのスタイルを違うものにする必要があります。このボタンがある場所はインラインスタイルと呼ばれます。

4
00:00:18,840 --> 00:00:24,850
ファイルやクラスとしてC-sを使うことには何も問題はありません。これはもっと好ましい方法かもしれません。

5
00:00:25,330 --> 00:00:32,790
しかし、アプリを見直して再表示することは、実際にはJavaScriptのスタイルをデザインすることです。

6
00:00:32,800 --> 00:00:34,420
これはどのように作動しますか。

7
00:00:34,800 --> 00:00:40,080
そのレンダリング関数に、私がスタイルに名前を付ける新しい定数を作成しましょう。

8
00:00:40,090 --> 00:00:41,660
名前はあなた次第です。

9
00:00:41,740 --> 00:00:43,460
これはjavascriptオブジェクトです。

10
00:00:43,480 --> 00:00:50,800
そしてあなたが知っているかもしれないようにD. C.

11
00:00:50,800 --> 00:00:59,170
スタイルプロパティとしては、このような背景色が無効であるため、ダッシュの代わりに背景色のラクダの例のようなjavascriptのrepressアノテーションがあります。

12
00:00:59,170 --> 00:01:04,140
Javascriptのプロパティ名を引用符で囲んで使用することもできます。

13
00:01:04,360 --> 00:01:09,850
私はラクダのケースを印刷された表現のために使用します、そして、私は色であることができる文字列である値を割り当てます。

14
00:01:10,210 --> 00:01:11,510
&nbsp;

15
00:01:11,530 --> 00:01:16,630
たとえば、白の場合は、すべて継承するフォントを設定できます。

16
00:01:16,630 --> 00:01:26,080
私たちの周囲の資金を使うために、ボーダーカラーをボーダーカラーではなく1ピクセルのサルレットの境界線に設定することもできますし、青色にすることもできます。

17
00:01:26,580 --> 00:01:32,970
&nbsp;

18
00:01:32,980 --> 00:01:34,840
多分8ピクセル。

19
00:01:34,840 --> 00:01:39,760
私たちはChalis Trottierを書いているので、これらの値はすべて引用符で囲んでください。

20
00:01:39,880 --> 00:01:42,840
これは文字列でなければなりません。

21
00:01:42,860 --> 00:01:49,430
今度は、ボタンをクリックして新しい行に移り、スタイルプロパティを読み込んで追加するのが少し楽になりました。

22
00:01:49,640 --> 00:01:50,720
&nbsp;

23
00:01:51,080 --> 00:01:58,280
これは実際にはJ S

24
00:01:58,280 --> 00:02:01,060
Xとスタイルで利用できる通常のスタイル属性です。ここで動的値を受け取るべきであることが既にわかっています。

25
00:02:01,320 --> 00:02:09,230
すべての米国は単純にここでスタイルを渡しますが、このスタイル定数は実行メソッドで定義されていますが、ここでは式を一部で返します。このようなものは使用できません。

26
00:02:09,620 --> 00:02:14,630
&nbsp;

27
00:02:14,630 --> 00:02:16,150
クラスプロパティではありません。

28
00:02:16,190 --> 00:02:23,120
このレンダリングメソッドの定数を決して変更しないので、これは通常の変数です。

29
00:02:23,660 --> 00:02:31,840
これを保存しても効果があるかどうかを見てみましょう。

30
00:02:31,990 --> 00:02:37,750
&nbsp;

31
00:02:37,760 --> 00:02:44,880
&nbsp;

32
00:02:44,880 --> 00:02:46,460
まず、このエラーを修正し、境界から1ピクセル離れたところにこのスタイルを適用してポインタをポインターに設定して、ポイントRokerを取得するか、その上にカーソルを置いたときに、少し上げて改善することができます。

33
00:02:46,630 --> 00:02:47,700
これで安全です。

34
00:02:47,980 --> 00:02:52,150
青い枠線が表示され、そのカーソルが再び表示されます。

35
00:02:52,150 --> 00:02:58,780
ホバリング時に変更されず、実際にスタイリングが行われるのは、インラインスタイルを使用するとホバー効果が実際には難しいということです。

36
00:02:58,780 --> 00:03:00,530
&nbsp;

37
00:03:00,530 --> 00:03:05,920
&nbsp;

38
00:03:05,920 --> 00:03:12,790
これはすでに一つの制限ですが、私はこのコースでモジュール全体を手に入れました。ここでは、再考コンポーネントのスタイリングに対する巧妙な解決策を紹介します。実際には、多くのことを考慮することができます。

39
00:03:12,790 --> 00:03:13,650
&nbsp;

40
00:03:13,660 --> 00:03:16,720
常にC Sファイルを使用できることに注意してください。

41
00:03:16,930 --> 00:03:19,310
それから、ここで見つけるための皿タオルはグローバルです。

42
00:03:19,330 --> 00:03:23,590
ここでボタンを変更すると、アプリ全体のすべてのボタンが変更されます。

43
00:03:23,620 --> 00:03:30,940
だから、あなたが望むものではないかもしれませんが、一方では構文として、あるいはインラインスタイルを使用してここでやるように普通に使うことができます。

44
00:03:30,940 --> 00:03:33,250
&nbsp;

45
00:03:33,250 --> 00:03:38,860
次に、スタイリングはコンポーネントまたは実際に追加した要素のスコープになります。

46
00:03:39,040 --> 00:03:44,250
しかし、あなたはC-sの完全な力を活用できないといういくつかの制限があります。

47
00:03:44,560 --> 00:03:49,870
私が言及したように、スコープのスタイルが可能で、すべてのC S

48
00:03:49,870 --> 00:03:54,460
S機能を使用できる真っ暗な道があるので、これについて完全なモジュールを用意します。

49
00:03:54,460 --> 00:03:55,930
これについては後述します。

50
00:03:55,930 --> 00:04:00,230
現時点では、この2つの異なるスタイリング方法があることに注意してください。

51
00:04:00,370 --> 00:04:02,890
ここで行うように、インラインスタイルを使用してください。

52
00:04:02,980 --> 00:04:09,980
スコープのスタイルを設定し、この単一の要素にのみ適用され、アプリ内の、または同じ要素内の要素にも適用されないようにします。

53
00:04:10,060 --> 00:04:13,360
&nbsp;

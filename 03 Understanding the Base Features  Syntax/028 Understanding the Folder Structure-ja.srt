1
00:00:02,360 --> 00:00:06,360
最後の講義では、私たちはcreate reactでプロジェクトを作成しました。

2
00:00:06,450 --> 00:00:11,980
私が言及したように、あなたのコードを作業しているときはいつでも、このプロセスをNPMが起動していることを確認してください。

3
00:00:11,980 --> 00:00:13,260
&nbsp;

4
00:00:13,290 --> 00:00:19,160
スタジオコードであるMicrosoftで作成したフォルダを開きます。

5
00:00:19,200 --> 00:00:22,030
これは私がコースに使用するアイデアです。

6
00:00:22,200 --> 00:00:25,430
しかし、使用したいアイデアやエディタを使用することができます。

7
00:00:25,500 --> 00:00:31,950
例えば、すべてのウェブストアは、代替品になるか、それは崇高であるか、Adamまたはあなたが好きなエディタです。

8
00:00:31,950 --> 00:00:33,000
&nbsp;

9
00:00:33,000 --> 00:00:38,850
今ここで私はテーマといくつかの拡張をインストールして、このビデオに添付されているPTFドキュメントで説明した、あなたが使っている正確な設定を見つけることができます。

10
00:00:39,140 --> 00:00:42,170
&nbsp;

11
00:00:42,210 --> 00:00:48,150
あなたが同じものを使用したいが、あなたのお気に入りのセットアップを自由に使いたい場合は、テーマを選んでセットアップして、あなたのプロジェクトに同量のファイルとフォルダを持たせてください。

12
00:00:48,150 --> 00:00:53,230
&nbsp;

13
00:00:53,460 --> 00:00:58,890
ここではルートレベルにあるすべてのファイルとフォルダを調べて、いくつかの設定ファイルを入手してみましょう。

14
00:00:58,890 --> 00:01:00,420
&nbsp;

15
00:01:00,480 --> 00:01:03,010
これらのロックファイルは、基本的に無視できます。

16
00:01:03,030 --> 00:01:07,800
私たちが一般的な依存関係を使用している依存関係の言葉で彼らの胸をロックしています。

17
00:01:07,800 --> 00:01:14,250
私たちのプロジェクトの帽子はパッケージ化された隣接ファイルに定義されています。そこには3つのペンディングがこのプロジェクトにあり、これはすべて再作成アプリケーションで作成されたものです。

18
00:01:14,250 --> 00:01:18,360
&nbsp;

19
00:01:18,540 --> 00:01:24,720
わかりましたが、私たちはここで明らかに反応しています。私はあなたがこれを見ている時点で、再行動16のリリース候補バージョンを使用しています。

20
00:01:24,720 --> 00:01:26,520
&nbsp;

21
00:01:26,520 --> 00:01:32,710
&nbsp;

22
00:01:32,760 --> 00:01:39,900
&nbsp;

23
00:01:39,990 --> 00:01:46,340
これはリリースされなければならないre-actドームそれは私が言及した同じと再行動のスクリプトは、このすべてのこのワークフローを構築するこの開発サーバーを提供するパッケージです次の世代のjavascript機能をサポートし、隣接する父親はいくつかのスクリプトを定義しています。

24
00:01:46,560 --> 00:01:51,000
これらのスクリプトは、NPMを実行してからスクリプト名を実行して実行できます。

25
00:01:51,180 --> 00:01:57,060
例外はstartであり、NPMで実行してコマンドを実行することもできます。また、このre-act

26
00:01:57,060 --> 00:02:02,680
scriptsパッケージを使用して、開始コマンドを実行することもできます。

27
00:02:02,690 --> 00:02:03,730
それは単なるコマンドです。

28
00:02:03,750 --> 00:02:08,900
このパッケージはちょっとしたレベルになり、このコマンドを実行してこの開発サーバーを起動します。

29
00:02:08,940 --> 00:02:15,750
&nbsp;

30
00:02:15,750 --> 00:02:21,360
&nbsp;

31
00:02:21,570 --> 00:02:28,740
&nbsp;

32
00:02:28,770 --> 00:02:30,090
私たちのコードをすべて見るコードをコンパイルするコードを最適化して、アプリケーションを展開する準備が整ったら実行するNPM実行ビルドを最適化してください。あなたのコンパイルされたコードはここにはどこにも表示されないので、フォルダです。

33
00:02:30,090 --> 00:02:31,770
すべてが記憶で起こる。

34
00:02:31,770 --> 00:02:35,190
しかし、コースの後半でアプリケーションを配備することに戻ります。

35
00:02:35,220 --> 00:02:37,140
だから、このパッケージの話を終わらせてみましょう。

36
00:02:37,140 --> 00:02:44,710
今のところ、node modulesフォルダには、プロジェクトのすべての依存関係とSuppe依存関係が格納されています。

37
00:02:44,940 --> 00:02:46,780
これが私たちが多く持っている理由です。

38
00:02:46,800 --> 00:02:53,130
私たちは、腕と反動のスクリプトを反応させるだけでしたが、スクリプトの再作用は他の多くの依存関係を持っていました。

39
00:02:53,130 --> 00:02:56,550
これらの小さなツールはすべて、コードをコンパイルしています。

40
00:02:56,760 --> 00:02:59,820
ノードモジュールフォルダには何も編集しないでください。

41
00:02:59,850 --> 00:03:06,510
これは、プロジェクトフォルダにNPMインストールを実行し、再作成スクリプトを作成することで自動的に実行された場合に自動的に生成されます。

42
00:03:06,570 --> 00:03:08,680
&nbsp;

43
00:03:08,850 --> 00:03:11,160
パブリックフォルダはより面白いです。

44
00:03:11,160 --> 00:03:16,070
基本的には、最終的にはWebサーバーによって提供されるルートフォルダーです。

45
00:03:16,080 --> 00:03:23,090
ここでは、スクリプトファイルを編集できるファイルだけが保持され、ソースフォルダに追加されます。

46
00:03:23,490 --> 00:03:26,580
ここで重要なファイルインデックスh t m lを得ました。

47
00:03:26,700 --> 00:03:30,960
これは通常のHGLページであり、それはまだ単一ページです。

48
00:03:30,980 --> 00:03:32,010
私たちは少ないです。

49
00:03:32,070 --> 00:03:35,760
このプロジェクトでは、HDMIページを追加することはありません。

50
00:03:35,820 --> 00:03:41,950
マルチページプロジェクトを作成している場合は、そのようなプロジェクトを複数作成して、追加しないリパクトアプリを作成します。

51
00:03:42,240 --> 00:03:43,630
&nbsp;

52
00:03:43,650 --> 00:03:47,690
ティムはここで打ち切ります。そうしたい場合は自分のワークフローが必要です。

53
00:03:47,820 --> 00:03:54,820
最終的にスクリプトファイルがそのビルドワークフローによって注入されるのは1ページです。

54
00:03:54,840 --> 00:04:01,200
ここでスクリプトのインポートは表示されず、このファイルを編集できますが、ここではNEHTA HTMLコードを記述します。

55
00:04:01,200 --> 00:04:02,160
&nbsp;

56
00:04:02,340 --> 00:04:05,670
私は、IDルートを使ってdiff年を強調したいと思います。

57
00:04:05,700 --> 00:04:11,910
これは後で実際に反応アプリケーションを実装する場所になるため、重要になります。もちろん、作業して反応します。

58
00:04:12,060 --> 00:04:14,160
&nbsp;

59
00:04:14,160 --> 00:04:20,880
しかし、AbwehrライブラリC-sをライブラリとして言いたい、あるいはメタタグを追加したいと思うようなインポートを追加する必要があれば、その年をDHVメールファイルで行うことができます。

60
00:04:20,880 --> 00:04:25,170
&nbsp;

61
00:04:25,170 --> 00:04:26,930
彼の年齢をここに増やすこともできます。

62
00:04:26,940 --> 00:04:33,480
しかし、やはりおそらく、おそらく、これを行うには、再作成アプリケーションを作成すると、進歩的なWebアプリケーションをすぐに提供できるので、隣接するFollettのマニフェストを再現したいと思うでしょう。

63
00:04:33,480 --> 00:04:37,230
&nbsp;

64
00:04:37,260 --> 00:04:43,230
非常に基本的なものであり、私たちのアプリケーションに関するいくつかのメタデータを見つけることができる彼の宣言を隣接する秋に与えてくれます。

65
00:04:43,230 --> 00:04:45,630
&nbsp;

66
00:04:45,630 --> 00:04:48,150
興味深いのは、ソースフォルダです。

67
00:04:48,270 --> 00:04:53,150
ここではいくつかのファイルがあります。これらは実際には作業するファイルです。

68
00:04:53,240 --> 00:04:56,310
これは実際に私たちの反応のアプリケーションです。

69
00:04:56,580 --> 00:04:58,380
今私たちのために最も重要です。

70
00:04:58,380 --> 00:05:06,540
次のjsファイルは、私たちのh

71
00:05:06,540 --> 00:05:12,000
chimleyファイルのDomのこのルート要素にアクセスします。IDルートを持つ要素はもちろん、このDefのインデックスHVMファイルです。

72
00:05:12,000 --> 00:05:20,500
これは、レンダリングメソッドを使ってリアクティアプリケーションをレンダリングすることがわかります。

73
00:05:20,850 --> 00:05:29,940
ここでは、appファイルからインポートするDaut J.という拡張子のアプリケーションオブジェクトまたは要素のリファレンスを示します

74
00:05:30,060 --> 00:05:36,480
S. ビルドのワークフローで自動的に追加されているので、このアプリケーションのJSファイルを見ているので、これは除外されています。

75
00:05:36,480 --> 00:05:38,290
&nbsp;

76
00:05:38,290 --> 00:05:45,870
したがって、これは私たちが最初の唯一の再行動のコンポーネントを見ているところです。

77
00:05:45,870 --> 00:05:47,010
&nbsp;

78
00:05:47,070 --> 00:05:53,580
ここではGSXをいくつか見ていき、次の講義ではここで深く掘り下げていきます。

79
00:05:53,880 --> 00:06:01,210
ここでは、このラッピングdiv内のすべてのコンテンツを削除し、単純に1つのタグを追加してみましょう。

80
00:06:01,240 --> 00:06:12,010
あなたの井戸はこう言います。私も反応していますが、もちろんそれを閉じて、それを保存しましょう。

81
00:06:12,010 --> 00:06:15,200
それは常に重要です。あなたのファイルを保存することを忘れないでください。

82
00:06:15,240 --> 00:06:21,400
これで、NPMの実行が開始されたので、自動的に再コンパイルがトリガーされます。

83
00:06:21,580 --> 00:06:27,130
そして、自動的にあなたのページをリロードする必要があります。これはあなたが今見なければならない理由です。こんにちは私は古いコンテンツの代わりに反応するアプリです。

84
00:06:27,190 --> 00:06:28,960
&nbsp;

85
00:06:29,050 --> 00:06:35,380
それで、彼のロゴを削除することもできます。私たちのプロジェクトではもはやそれを使用しないので、あなたが落ちるのを尋ねません。

86
00:06:35,380 --> 00:06:38,850
そして今、我々は少しクリーナーのソースフォルダを手に入れました。

87
00:06:38,860 --> 00:06:42,040
今度は何が私たちのために再行動を創造しましたか？

88
00:06:42,070 --> 00:06:48,640
それは基本的に私たちがこのアプレットのジャズファイルで使用するいくつかのスタイリングを定義するCのSファイルにこのアプリを与えましたが、私はこれらがこの秋にスコープされていないと言うでしょう。

89
00:06:48,640 --> 00:06:52,660
&nbsp;

90
00:06:52,660 --> 00:07:00,370
&nbsp;

91
00:07:00,370 --> 00:07:07,240
&nbsp;

92
00:07:07,240 --> 00:07:14,540
これらはまだグローバルスタイリングであり、私は実際にそのファイル内のこの最初のアプリケーションクラス定義以外のものをすべて削除して、そこに保存します。次に、私たちは秋を見て、Stahlをグローバルに適用します。私たちのアプリケーションのあなたのためのあなたのようにアップ。

93
00:07:14,660 --> 00:07:20,020
サービスワーカーの倒産を登録することは、自動的に生成されるサービスワーカーを登録するために重要なことを暗示しています。

94
00:07:20,260 --> 00:07:22,290
&nbsp;

95
00:07:22,300 --> 00:07:26,490
これは、プログレッシブなWeb Ebbeとは関係があります。

96
00:07:26,560 --> 00:07:30,180
それは基本的に私たちのスクリプトファイルをプリクラッシュさせます。

97
00:07:30,220 --> 00:07:34,160
そこに何も設定したり、ファイルをテストする必要はありません。

98
00:07:34,290 --> 00:07:36,880
さて、コースの後半でテストをしていきます。

99
00:07:36,880 --> 00:07:44,380
基本的には、アプリケーションのコンポーネントなど、さまざまなユニットの単体テストを作成することができます。

100
00:07:44,410 --> 00:07:51,670
これは一般的な設定であり、大部分のコードはAPTやJames、または私たちが作成する新しいコンポーネントで動作します。

101
00:07:51,670 --> 00:07:52,630
&nbsp;

102
00:07:52,630 --> 00:07:58,260
言えば、このファイルを分析して、そこに見られる構文を理解しましょう。

103
00:07:58,390 --> 00:08:01,990
ロゴファイルを削除するので、そのロゴのインポートを取り除きましょう。

104
00:08:01,990 --> 00:08:08,530
これを見て、J S Xの正確な内容とアプリケーションに多くのコンポーネントを追加する方法について説明します。

105
00:08:08,530 --> 00:08:09,730
&nbsp;

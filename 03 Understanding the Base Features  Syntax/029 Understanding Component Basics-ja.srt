1
00:00:02,380 --> 00:00:07,900
最後の講義では、Createによって作成されたフォルダ構造を歩いてきました。

2
00:00:08,020 --> 00:00:09,650
私たちは適切に編集しました。

3
00:00:09,670 --> 00:00:10,730
JS落ちる。

4
00:00:10,840 --> 00:00:13,620
ここで私たちが見ているものをさらに深く掘り下げてみましょう。

5
00:00:13,690 --> 00:00:21,190
私は、再動作は基本的にカスタムのHVM要素を作成してアプリケーションを構築するために使用できるコンポーネントを作成することであると説明したので、再動作コンポーネントを参照してください。

6
00:00:21,400 --> 00:00:26,200
&nbsp;

7
00:00:26,200 --> 00:00:33,280
このアプリケーションコンポーネントは、実際にこのルート要素の場所にレンダリングする次のjsファイルを使用します。

8
00:00:33,340 --> 00:00:34,030
&nbsp;

9
00:00:34,210 --> 00:00:39,450
そして、ここで正常な年齢の女性要素をここでテストすることができます。

10
00:00:39,480 --> 00:00:40,240
これはうまくいくでしょう。

11
00:00:40,240 --> 00:00:42,570
これで、再行動コンポーネントはありませんか？

12
00:00:42,610 --> 00:00:45,640
私がこれを保存すれば、私はこの時代のWintecを見ます。

13
00:00:46,000 --> 00:00:49,360
しかし、当然のことながら、実際の再行動の適用はありません。

14
00:00:49,470 --> 00:00:55,860
私たちは通常のHVM要素をレンダリングしていますが、私たちは独自の再動作コンポーネントをレンダリングしていません。

15
00:00:55,870 --> 00:01:02,800
もちろん、レンダラで複数の反応を使用して、アプリケーションで使用するすべてのHPコードをレンダリングすることもできます。

16
00:01:02,860 --> 00:01:03,940
&nbsp;

17
00:01:04,030 --> 00:01:07,530
しかし、実際にあなたのリ・アクト・アプリをどのように作成するかは実際にはありません。

18
00:01:07,810 --> 00:01:15,760
通常は、1つのルートコンポーネントをappコンポーネントにレンダリングしますが、1つのルートコンポーネントに必要なものはすべて名前を付けることができます。

19
00:01:15,820 --> 00:01:16,840
&nbsp;

20
00:01:16,840 --> 00:01:24,150
私たちの場合、それはappという名前のティップコンポーネントであり、そこに他のすべてのコンポーネントがネストされます。

21
00:01:24,150 --> 00:01:30,050
あなたのアプリケーションは、もちろん、これらのコンポーネントを相互に入れ子にすることもできます。

22
00:01:30,250 --> 00:01:37,300
&nbsp;

23
00:01:37,330 --> 00:01:45,010
しかし、あなたがHMOの秋に複数のノードに手を差し伸べることができる1つのルートコンポーネントだけを持っていて、同じプロジェクト内の異なる再行動アプリすべてに対して異なるルートコンポーネントをマウントできます。

24
00:01:45,010 --> 00:01:47,950
それは可能ですが、私たちがここでやっていることではありません。

25
00:01:47,980 --> 00:01:52,810
最後に、あなたはもちろん、このコースで学んだことを、同じHTLフィールドにある複数のアプリケーションに対して単純に複製することができます。

26
00:01:52,930 --> 00:01:55,270
&nbsp;

27
00:01:55,540 --> 00:01:59,170
しかし、反応の一般的または典型的な使用に固執しましょう。

28
00:01:59,170 --> 00:02:04,450
私たちは深い考えのJSファイルを見つけるためのこのアプリケーションコンポーネントを持っています。

29
00:02:04,450 --> 00:02:11,140
&nbsp;

30
00:02:11,140 --> 00:02:18,730
ここでは、classキーワードを使用してjavascriptクラスを作成し、次にこのコンポーネントオブジェクトまたはクラスから継承するためにextentsキーワードを使用する、反応コンポーネントを定義する2つの方法の1つを見ていきます。

31
00:02:18,730 --> 00:02:25,120
正確に言えば、ここでは再活動図書館からインポートされています。

32
00:02:25,120 --> 00:02:33,250
実際には、DOMに何かを描画する責任があるか、または必要なものを2つ取り込みます。

33
00:02:33,250 --> 00:02:34,030
&nbsp;

34
00:02:34,030 --> 00:02:37,750
私たちはいつもコンポーネントを定義するファイルにインポートする必要があります。

35
00:02:38,080 --> 00:02:43,300
もちろん、コンポーネントクラスそのものは、すぐにコンポーネントを作成する別の方法を示します。

36
00:02:43,330 --> 00:02:44,370
&nbsp;

37
00:02:44,470 --> 00:02:46,800
今、このクラスには1つのメソッドがあります。

38
00:02:46,930 --> 00:02:48,130
レンダリングメソッド。

39
00:02:48,220 --> 00:02:54,940
これは、再演がスクリーンに何かをレンダリングするためにこのメソッドを呼び出すためです。

40
00:02:55,230 --> 00:02:57,400
重要な仕事が1つあります。

41
00:02:57,580 --> 00:03:06,370
すべての再動作コンポーネントは、スクリーンにDomにレンダリングできるHVMの他のコードを返すかレンダリングする必要があります。

42
00:03:06,440 --> 00:03:08,240
&nbsp;

43
00:03:08,470 --> 00:03:12,160
あなたはそこに他のことをすることができますインターネットに手を差し伸べる。

44
00:03:12,160 --> 00:03:17,320
いくつかの計算では、アプリケーションで必要なイベントを聴いています。

45
00:03:17,320 --> 00:03:25,020
そのコースではすべてが表示されますが、夜明けには常にHVMメールをレンダリングする必要もあります。

46
00:03:25,030 --> 00:03:28,140
これは覚えておくことが非常に重要です。

47
00:03:28,330 --> 00:03:34,440
このABクラスをこのファイルのデフォルトエクスポートとしてエクスポートします。

48
00:03:34,510 --> 00:03:41,020
このESXの機能は、このファイル全体をインポートすると、デフォルトのエクスポートであるため、単にこのクラスをインポートします。

49
00:03:41,020 --> 00:03:43,280
&nbsp;

50
00:03:43,660 --> 00:03:50,210
インデックスJaspalでそれらを使用して、アプリケーションファイルからアプリを再度インポートします。

51
00:03:50,230 --> 00:03:56,840
この拡張機能は、javascriptファイル用のビルドワークフローによって自動的に追加されるため、省略されています。

52
00:03:57,260 --> 00:04:02,910
ここでは方法によって適切な名前が選択されますが、通常はコンポーネントの名前を使用します。

53
00:04:02,980 --> 00:04:08,140
また、ファイル内で使用し、ファイル名としても使用します。

54
00:04:08,140 --> 00:04:09,320
片側のメモ。

55
00:04:09,400 --> 00:04:16,890
これらのコンポーネントは、Dot JをXとすると、J Sの代わりにファイル拡張子として表示されることもあります。

56
00:04:16,930 --> 00:04:19,970
この理由はここにコードされています。

57
00:04:20,260 --> 00:04:24,410
私はそれを返されたh t m lと呼んだ。

58
00:04:24,760 --> 00:04:27,250
しかし、これは最終的にHVM Lではありません。

59
00:04:27,310 --> 00:04:32,880
それはそれのように見えるが、それはJとしてXであるので、それはjavascriptである。

60
00:04:32,980 --> 00:04:39,340
&nbsp;

61
00:04:39,340 --> 00:04:46,720
&nbsp;

62
00:04:46,720 --> 00:04:52,630
&nbsp;

63
00:04:52,630 --> 00:04:54,330
少し違って見えますが、これはまず最初に混乱するかもしれません。反応を覚えているときに、これは実際に重要な最も混乱しやすいものの1つかもしれません。これは構文的な砂糖が基本的に再行動チームによって考案されたものです。私たちがここで使用しているビルド・ワークフローのためにjavascriptファイルにあります。

64
00:04:54,340 --> 00:04:58,940
基本的に自動的に有効なjavascriptとdntにパイロットをトロンします。

65
00:04:59,350 --> 00:05:07,190
それはあなたがそれを使用しているFalakに接続していないし、ドットジェイムズとドットジェームズExファイルとコンベンションは、今日はかなりあなたが常にドットJをfalseとして使用することです。

66
00:05:07,330 --> 00:05:12,660
&nbsp;

67
00:05:13,030 --> 00:05:22,600
そして、それは単にHVMメールを引用符で書くために使用できるコードまたは構文ですが、最後には紛らわしいように見えます。

68
00:05:22,660 --> 00:05:25,310
&nbsp;

69
00:05:25,420 --> 00:05:29,890
次の講義でこれが実際にどのように編集されているのかを教えてください。

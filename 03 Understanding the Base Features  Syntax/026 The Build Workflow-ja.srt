1
00:00:02,610 --> 00:00:07,170
だから私たちは地元のレアックプロジェクトを地元の人とセットアップしたいと思っています。

2
00:00:07,170 --> 00:00:13,430
私はコードペンを使わないという意味ですが、私たちのマシンで私たち自身のIで作業できるプロジェクトがあります。

3
00:00:13,440 --> 00:00:15,600
T. またはエディタ。

4
00:00:15,600 --> 00:00:18,010
これは当然のことながら私たちが反応する方法です。

5
00:00:18,030 --> 00:00:19,810
私たちはそれを私たちのマシンに持ちたいと思っています。

6
00:00:19,830 --> 00:00:21,890
そこにはもっと多くの機能があります。

7
00:00:21,930 --> 00:00:27,840
以前使用していたウェブエディタやコードペンやJay

8
00:00:27,840 --> 00:00:33,960
Espagneを使用するよりも便利で、オプションの2番目のMarchalは実際のプロジェクトの実際の作業環境よりもはるかに遊び場です。

9
00:00:33,960 --> 00:00:34,710
&nbsp;

10
00:00:34,860 --> 00:00:36,990
そこで私たちは地元のプロジェクトを立ち上げます。

11
00:00:37,140 --> 00:00:41,330
Andreaは実際にD2をインポートするだけではありません。

12
00:00:41,350 --> 00:00:43,050
我々は輸入し、Koeppen。

13
00:00:43,200 --> 00:00:47,020
実際のプロジェクトにはもっと精巧なワークフローが必要です。

14
00:00:47,130 --> 00:00:51,380
これは、シングルページとマルチページの両方のアプリケーションにお勧めします。

15
00:00:51,390 --> 00:00:57,300
もちろん、なぜより複雑なワークフローが必要なのか、それを達成するにはどうすればよいのでしょうか。

16
00:00:57,300 --> 00:01:05,270
実際のアプリケーションをビルドしてコードを実際に最適化したいのはどういうことから始めましょう。

17
00:01:05,280 --> 00:01:11,490
&nbsp;

18
00:01:11,490 --> 00:01:19,980
&nbsp;

19
00:01:20,050 --> 00:01:23,400
コードペンの最初のコースモジュールのデモプロジェクトではこれに気にしませんでしたが、負債がパフォーマンスを向上させるため、できるだけ小さく、可能な限り最適化されたコードを出荷したいと考えています。私たちのアプリ。

20
00:01:23,400 --> 00:01:25,390
さらにそれは非常に重要です。

21
00:01:25,470 --> 00:01:28,720
これらの次世代のjavascript機能を使用したいと考えています。

22
00:01:28,770 --> 00:01:32,520
私は最後のオプションのモジュールについてあなたに教えました。

23
00:01:32,610 --> 00:01:37,400
今は開発者としての私たちの生活をはるかに容易にするため、これを使用したいと考えています。

24
00:01:37,650 --> 00:01:43,350
そして、これは、これらの次世代機能のすべてを使用する再動作の事実上の標準です。なぜなら、コードはより読みやすく、読みやすくなっています。

25
00:01:43,350 --> 00:01:45,970
&nbsp;

26
00:01:45,990 --> 00:01:48,980
エラーが起こりにくく、他の多くの理由があります。

27
00:01:49,020 --> 00:01:51,480
だからあなたは本当にこれらの機能を使うべきです。

28
00:01:51,480 --> 00:01:54,230
それは単なる素晴らしいオプションではありません。

29
00:01:54,330 --> 00:01:56,550
これらの機能を使用することを強くお勧めします。

30
00:01:56,630 --> 00:02:01,560
これはベストプラクティスとみなされ、明らかに私はあなたにベストプラクティスを教えたいので、このコースで私があなたに教えるものです。

31
00:02:01,560 --> 00:02:03,170
&nbsp;

32
00:02:03,510 --> 00:02:09,060
そこで、次世代のjavascript機能を使用して、エラーの発生しにくいコードを書く時間を短縮したいと考えています。

33
00:02:09,060 --> 00:02:09,910
&nbsp;

34
00:02:10,320 --> 00:02:16,100
これらの機能をすべてサポートするワークフローが必要です。

35
00:02:16,140 --> 00:02:22,770
私たちは暗黙のうちに、バブルに切り替えた前処理のドロップダウンを思い出しました。例えば、javascriptの構文で、XがHVM

36
00:02:22,770 --> 00:02:31,710
LのようにJをサポートするいくつかのビルドツールをロックしていました。

37
00:02:31,710 --> 00:02:33,140
&nbsp;

38
00:02:33,300 --> 00:02:35,670
だから私たちはこれらの次世代機能を使いたいと思っています。

39
00:02:35,760 --> 00:02:43,020
本質的には、6つ以上のコードを書いて、可能な限り多くのブラウザで動作するコードを最後に出荷することができ、多くのブラウザがこれらの次世代機能をすべてサポートしないようにしたいと考えています。

40
00:02:43,020 --> 00:02:49,710
&nbsp;

41
00:02:49,710 --> 00:02:54,590
そのため、実際にこれらの機能を組み合わせた大胆なワークフローが必要です。

42
00:02:54,720 --> 00:02:57,140
最後に、最終的にはより生産的になりたいと思っています。

43
00:02:57,180 --> 00:03:02,850
これには、より凝縮されたコードを書くことができる次世代のjavascript機能が含まれますが、C S

44
00:03:03,180 --> 00:03:06,880
Sの自動プレフィックスなども含まれています。

45
00:03:06,960 --> 00:03:13,410
C Sの接頭辞は、C

46
00:03:13,410 --> 00:03:14,850
Sの機能のために可能な限り広いブラウザサポートを実現するためのものであることがわかります。

47
00:03:15,090 --> 00:03:17,860
これらのプレフィックスを手作業で追加するのは非常に面倒です。

48
00:03:17,940 --> 00:03:19,990
自動的に追加するのはいいですね。

49
00:03:20,040 --> 00:03:21,560
またはglintingを検討してください。

50
00:03:21,570 --> 00:03:28,740
実際にあなたにも最適なコードを書いている場合は警告するツールです。

51
00:03:28,800 --> 00:03:34,990
厳密には必須ではありませんが、すばらしい機能とこれらのすべてがビルドワークフローの一部である必要があります。

52
00:03:35,100 --> 00:03:41,370
&nbsp;

53
00:03:41,370 --> 00:03:49,020
&nbsp;

54
00:03:49,170 --> 00:03:57,040
ここでそれらを実装するには、ヒントの場合に警告するか、できるだけ多くのブラウザで動作するコードをコンパイルするために、コードを実行するツールが必要です非常に現代的なコードは、多くのブラウザ上で動作しません。

55
00:03:57,420 --> 00:04:04,230
&nbsp;

56
00:04:04,230 --> 00:04:10,350
これが、この種のコードを書くことが望ましい理由の2つの理由、なぜ実際に私たちのコードを最適化し、どのようにしてコースが妥当であるかを忘れるという、より複雑なビルドワークフローが必要な理由です。

57
00:04:11,010 --> 00:04:13,570
&nbsp;

58
00:04:13,800 --> 00:04:16,210
どのようにしてこのようなワークフローを実現しますか？

59
00:04:16,230 --> 00:04:19,110
まず第一に、依存性管理ツールが必要です。

60
00:04:19,140 --> 00:04:25,310
&nbsp;

61
00:04:25,330 --> 00:04:31,640
依存関係は単に第三者のライブラリであり、サードパーティ製のjavascriptパッケージは再依存します。たとえば、依存関係はDharmaの依存関係と、最終的に必要となるすべての組み込みツールに反応します。

62
00:04:31,710 --> 00:04:32,930
私たちの依存関係。

63
00:04:33,120 --> 00:04:38,980
したがって、次世代のjavascriptのコンパイラは現在のgenのjavascriptに依存しています。

64
00:04:39,150 --> 00:04:40,860
ここではNPMを使用します。

65
00:04:40,980 --> 00:04:48,060
Yarnedはあなたが使用できる別のツールですが、私たちはNPMノードのパッケージマネージャーを使用して、パッケージを管理するツールと、依存関係を管理するためのデファクトスタンダードだけを使用します。

66
00:04:48,390 --> 00:04:54,130
&nbsp;

67
00:04:54,240 --> 00:04:57,030
フロントエンドプロジェクトにも。

68
00:04:57,030 --> 00:05:04,960
その依存関係管理ツールのほかに、モジュール化されたコードを記述して複数のファイルに分割して各ファイルに明確なタスクが明確になるようにしたいので、ハンドラが必要です。

69
00:05:04,960 --> 00:05:10,450
&nbsp;

70
00:05:10,480 --> 00:05:12,540
&nbsp;

71
00:05:12,850 --> 00:05:19,810
しかし、私たちは、ブラウザが少なくとも古いブラウザでは失敗する分割故障をサポートしていないため、このコードが出荷時に2つのファイルにまとめられていることを確認します。

72
00:05:19,810 --> 00:05:26,680
&nbsp;

73
00:05:26,980 --> 00:05:33,010
また、これらの小さなファイルに何千もの要求をするのに最適ではなかったとしても、そうしなくてもよいでしょう。

74
00:05:33,010 --> 00:05:35,020
&nbsp;

75
00:05:35,170 --> 00:05:40,120
だから私たちはそのバトラーを持っていたいと思っていますし、最近バンドルするためのデファクトスタンダードであるウェブパックを使用します。

76
00:05:40,120 --> 00:05:40,720
&nbsp;

77
00:05:40,720 --> 00:05:44,250
Webペグのクールなことは、単にファイルを束ねるだけではないということです。

78
00:05:44,320 --> 00:05:50,140
また、このバンドルを行う前に、いくつかのビルドステップをいくつか適用することもできます。

79
00:05:50,140 --> 00:05:57,370
たとえば、個々のテーブルを必要とする次世代javascriptの上記のコンパイル。

80
00:05:57,400 --> 00:06:04,420
Packの設定に含めることで、このバンドルと最適化の一部になりますプロセス。

81
00:06:04,690 --> 00:06:12,310
このjavascriptコンパイルを行うコンパイラが必要です。これは、現代的な機能から古いブラウザで動作するすべての作業を回避することを意味し、babbel

82
00:06:12,310 --> 00:06:19,100
plusプリセットを使用してWeb

83
00:06:19,180 --> 00:06:25,900
&nbsp;

84
00:06:25,900 --> 00:06:32,590
&nbsp;

85
00:06:32,590 --> 00:06:39,370
&nbsp;

86
00:06:39,460 --> 00:06:40,570
最終的には開発サーバーを使用してローカルマシン上のアプリケーションをテストしたいマシン開発サーバーはWebサーバーですが、私たちのマシンで実行しているマシンではダブルクリックしてHDメールファイルを開くことができますが、プロトコルであり、ウェブサーバ上で実行されているときにアプリケーションを正しくエミュレートすることはできません。

87
00:06:40,780 --> 00:06:45,300
したがって、Webサーバーが必要です。もちろん、ローカルマシン上で実行することもできます。

88
00:06:45,460 --> 00:06:49,760
サーバーは私たちだけがアクセスできますが、それだけで開発者として必要です。

89
00:06:49,870 --> 00:06:55,020
そして、実際のサーバー上で最後に実行されるようにアプリケーションを実行することができます。

90
00:06:55,060 --> 00:06:59,570
私たちはこれらのこと全てを必要とし、それはセットアップすべきスーパーコンプレックスのように聞こえる。

91
00:06:59,590 --> 00:07:07,000
良いことは、次回の講義で構成をゼロにして、これらすべてのものをサポートするプロジェクトを作成するツールを紹介するわけではありません。

92
00:07:07,000 --> 00:07:12,490
&nbsp;

93
00:07:12,490 --> 00:07:18,010
私たちはこのツールを一緒にインストールし、反応チームとコミュニティによって作成されたツールです。

94
00:07:18,170 --> 00:07:24,380
そして、私たちは正式に新しい反応型アプリケーションを作成する方法を推奨しました。なぜなら、それは談話の一般的なテーマだからです。

95
00:07:24,550 --> 00:07:32,000
ベストプラクティスと推奨される方法で物事を教えて、セットアップのすべてがとても簡単です。

96
00:07:32,080 --> 00:07:38,170
そして、あなたがまだ舞台裏でどのように働いているのかを突き止めたいのであれば、これを最初から設定したいと思っているのですか？

97
00:07:38,170 --> 00:07:39,610
&nbsp;

98
00:07:39,610 --> 00:07:46,030
私はまた、コースの終わりに向かって死んだためのモジュールを用意しました。ここでボルダーは1週間のプロジェクトをゼロから反応させます。

99
00:07:46,180 --> 00:07:47,560
&nbsp;

100
00:07:47,560 --> 00:07:50,080
それで、あなたは私たちが必要としているものとその方法を知っています。

101
00:07:50,080 --> 00:07:55,990
ここで私が言及した債務Toulについて考えてみましょう。これらのすべての機能をサポートする新しいRiakプロジェクトを実際に開始する方法を学びましょう。

102
00:07:55,990 --> 00:07:58,550
&nbsp;

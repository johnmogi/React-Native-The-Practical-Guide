1
00:00:02,150 --> 00:00:06,920
最後の講義では、このコンポーネントを歩き、一般的に構造化されています。

2
00:00:07,020 --> 00:00:08,610
さあ、これについてもっと深く考えてみましょう。

3
00:00:08,680 --> 00:00:17,160
このロックをここでコメントアウトするGSXのことはもう使われていないので、私はここでインポートしているre-actオブジェクトを使用してメソッドを呼び出すことができます。

4
00:00:17,730 --> 00:00:23,310
&nbsp;

5
00:00:23,370 --> 00:00:30,690
True

6
00:00:31,050 --> 00:00:33,720
Yate要素は、このコードがここで書いているものにまだコンパイルされていないので、私たちが取り入れる必要があるすべての理由を隠します。

7
00:00:33,810 --> 00:00:40,260
&nbsp;

8
00:00:40,260 --> 00:00:48,240
その創造的な要素は見えませんが、メソッドと自由な引数は実際に無限の引数をとりますが、少なくとも私にとっては最初にDOMにレンダリングする要素です。

9
00:00:48,240 --> 00:00:48,840
&nbsp;

10
00:00:48,840 --> 00:00:54,580
これは、死のディスクがdivのような通常のH-Gの男性要素になる可能性があります。

11
00:00:54,660 --> 00:00:58,980
もしあなたがここで少ししか道がないなら、あなた自身のコンポーネントかもしれません。

12
00:00:59,160 --> 00:01:04,860
私たちは、私たちがレンダリングできないコンポーネントの中にいるので、私たちはインポートしているオーディオコンポーネントをレンダリングすることができますが、そのようなコンポーネントはありません。

13
00:01:04,860 --> 00:01:08,390
&nbsp;

14
00:01:08,400 --> 00:01:13,000
2番目の引数は、基本的にはこれのための設定です。

15
00:01:13,350 --> 00:01:20,460
そして、そこに私たちはjavascriptオブジェクトを渡します。Desireはオプションです。私たちはすべてnullを渡すことができます。私はそれを設定したくないので、これを行うでしょう。

16
00:01:20,460 --> 00:01:23,140
&nbsp;

17
00:01:23,280 --> 00:01:30,510
ここで第三引数は子供の任意の量であり、私たちはハマスによって区切られた複数の引数を持つことができます。

18
00:01:30,510 --> 00:01:31,820
&nbsp;

19
00:01:31,890 --> 00:01:35,980
子供たちは、この死の中に入れ子になっているものを意味します。

20
00:01:36,060 --> 00:01:39,450
今の場合、あなたはNasta hの要素を一つにしたいと思っています。

21
00:01:39,720 --> 00:01:49,650
年齢1を追加してみましょう。数値引数として、このテキストを複数の感嘆符でここに追加し、この引用符をバックスラッシュでエスケープして、離散要素法によってレンダリングされたことを識別できるようにしましょう。

22
00:01:49,650 --> 00:01:56,310
&nbsp;

23
00:01:56,310 --> 00:01:58,570
&nbsp;

24
00:01:59,410 --> 00:02:05,450
今では、このコードを4つの引数divで作成します。 Studioコードでファイルを保存していることを確認します。ここに十字が表示されていない場合に保存されていることを確認してから、アプリケーションに戻ります。

25
00:02:05,500 --> 00:02:13,270
年齢1とテキストでは、Visual

26
00:02:13,270 --> 00:02:19,300
ここではH-1を見る。

27
00:02:19,300 --> 00:02:21,210
こんにちは、私は反応します。

28
00:02:21,440 --> 00:02:23,610
&nbsp;

29
00:02:23,650 --> 00:02:28,840
Chromeのデベロッパーツールでこれを調べてみると、私の場合は使用することを強くお勧めします。

30
00:02:28,840 --> 00:02:29,600
一方の端に2つのテキストノードがあるdivを開始します。

31
00:02:29,770 --> 00:02:34,330
こんにちは私は原子炉アプリですので、私たちは援助をしませんでした。

32
00:02:34,390 --> 00:02:37,340
&nbsp;

33
00:02:37,360 --> 00:02:45,370
テキストをレンダリングした要素の1つで、実際にはデフォルトの動作年齢はテキストとして解釈されます。

34
00:02:45,370 --> 00:02:46,010
diffの中に別の要素を描画したい場合は、要素としてレンダリングされません。

35
00:02:46,120 --> 00:02:52,510
&nbsp;

36
00:02:52,750 --> 00:03:00,580
ここでは、このコードをここに置き換えて、最後に新しいHVM要素を作成するための要素を作成する反応を呼び出す小説を置き換えます。

37
00:03:00,580 --> 00:03:03,290
ここで、hを1に設定し、次にnullを設定し、次にレンダリングするテキストを渡します。

38
00:03:03,310 --> 00:03:10,900
だから、ここでこれを混ぜ合わせて、今この作業をしましょう。

39
00:03:10,900 --> 00:03:15,800
今、このファイルを保存して、アプリケーションに戻ると、1人の技術者がこの作業を行います。

40
00:03:15,810 --> 00:03:21,690
今、開発者ツールでそれを調べると、これも見ることができます。

41
00:03:21,690 --> 00:03:25,640
私たちは死のラッピングを受ける。

42
00:03:25,780 --> 00:03:27,460
Hタグ。

43
00:03:27,490 --> 00:03:29,900
今私たちが見ていないのは、J

44
00:03:29,950 --> 00:03:38,290
is Xコードで追加されるクラスが表示されないので、C S Sスタイルが適用されることです。

45
00:03:39,190 --> 00:03:40,770
クラス名でC S Sクラスをクラスに追加しました。

46
00:03:40,780 --> 00:03:45,640
&nbsp;

47
00:03:45,640 --> 00:03:51,680
ちなみに、私は次の講義でクラス名を使う理由に戻ってきますので、私たちは取引要素呼び出しでクラス名を持っていました。

48
00:03:51,690 --> 00:03:55,850
設定としてnullを渡すのではなく、javascriptオブジェクトを渡すだけです。

49
00:03:55,920 --> 00:04:01,020
そしてそこにクラス名を定義し、追加したいC Sクラスを割り当てることができます。

50
00:04:01,530 --> 00:04:07,470
たとえば、同じクラスではここで申し込みます。

51
00:04:07,620 --> 00:04:11,930
&nbsp;

52
00:04:12,770 --> 00:04:20,710
&nbsp;

53
00:04:20,710 --> 00:04:28,210
&nbsp;

54
00:04:28,210 --> 00:04:36,910
&nbsp;

55
00:04:36,940 --> 00:04:45,310
このファイルを再ロードして保存し直しました。ここでは、再作成を行ってここに書いたコードを理解するために、この2日間の日にここで適用されるクラスが非常に重要であるため、要素と入れ子にされた再作成要素は、このGSX Xコードとまったく同じです。実際には、このコードがここから出てきた多くの組み込みツールの1つによってコンパイルされます。

56
00:04:45,340 --> 00:04:46,960
&nbsp;

57
00:04:46,960 --> 00:04:54,160
このプロジェクトでは、このシンタックスを使用するときには使用していないにもかかわらず、再処理をインポートする必要があるのは、シーンの裏で編集後に使用するためです。

58
00:04:54,160 --> 00:04:59,720
&nbsp;

59
00:05:00,010 --> 00:05:07,180
もちろん、このようなコードを書くことは、要素を追加して入れ子にしていくうちに、要素を作成することは本当に面倒です。

60
00:05:07,180 --> 00:05:10,000
このため、通常はこのコードを使用しません。

61
00:05:10,000 --> 00:05:12,910
しかし、代わりにこのコードを使い始めたのは、jをXとして使う理由です。

62
00:05:13,210 --> 00:05:19,930
しかし、内部を理解し、これが何をコンパイルするのかを理解することは非常に重要です。

63
00:05:19,930 --> 00:05:24,080
また、すべての人の中で最も重要なことは、それがそうではないように見える間に理解することです。

64
00:05:24,130 --> 00:05:31,090
これは最後にjavascriptです。

65
00:05:31,090 --> 00:05:33,370
このコードにコンパイルされます。

66
00:05:33,400 --> 00:05:35,960
&nbsp;

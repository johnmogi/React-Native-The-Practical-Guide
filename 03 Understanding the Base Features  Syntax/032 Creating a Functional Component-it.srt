1
00:00:02,210 --> 00:00:08,480
Abbiamo davvero imparato molto sui fondamentali fondamentali del re-act, specialmente questa geniale cosa X che è molto

2
00:00:08,480 --> 00:00:14,930
importante per avere ragione e capire, ma ho anche menzionato nel primo modulo del corso che il reattore

3
00:00:15,140 --> 00:00:21,890
è tutto basato sui componenti con cui costruisci la tua applicazione componenti e reagire come una libreria che rende

4
00:00:21,890 --> 00:00:24,410
così facile la costruzione di questi componenti.

5
00:00:24,590 --> 00:00:27,590
Bene, ora stiamo usando solo un componente.

6
00:00:27,620 --> 00:00:33,870
È ora di cambiare questo e per questo aggiungerò un nuovo file nella cartella sorgente del nostro progetto.

7
00:00:33,890 --> 00:00:39,020
In realtà aggiungerò anche una nuova cartella e la chiamerò con la P maiuscola.

8
00:00:39,100 --> 00:00:41,220
Questo è un po 'come la convenzione reagisce.

9
00:00:41,240 --> 00:00:48,620
Non devi farlo ma dai i tuoi componenti ai file in cui li crei caratteri iniziali iniziali e

10
00:00:48,620 --> 00:00:54,380
descrivi cosa è questo componente spazio e quindi E qui voglio rendere alcune informazioni

11
00:00:54,380 --> 00:01:01,490
su una persona all'interno della cartella di quella persona che è memorizzata nella cartella di origine o

12
00:01:01,490 --> 00:01:04,120
nella persona che contiene il file js.

13
00:01:04,220 --> 00:01:09,410
Sempre seguendo questa convenzione di avere un carattere iniziale di capitale

14
00:01:09,410 --> 00:01:16,420
e descrivendo di cosa si tratta adesso, voglio creare un componente e lo abbiamo già fatto.

15
00:01:16,520 --> 00:01:23,750
In realtà, abbiamo preso questo fuori dalla scatola nel file JS del pensiero estendendo la classe del componente

16
00:01:23,750 --> 00:01:25,580
dalla libreria del re-act.

17
00:01:25,670 --> 00:01:31,940
Possiamo assolutamente usare questo approccio e diventerà più importante in seguito quando imparerai a conoscere lo stato che

18
00:01:32,300 --> 00:01:37,800
ti permette in sostanza di cambiare il tuo componente in fase di runtime che potresti dire.

19
00:01:38,060 --> 00:01:43,850
Ma la maggior parte delle volte dovresti usare una diversa forma di componente.

20
00:01:43,850 --> 00:01:51,620
O di creare componenti una funzione migliore di una semplice funzione javascript perché nella sua forma più

21
00:01:51,950 --> 00:01:58,480
semplice un componente è solo una funzione che restituisce alcuni GSX ad altri HVM.

22
00:01:58,520 --> 00:02:03,040
Si potrebbe dire che ora è possibile creare una funzione con una parola chiave funzione.

23
00:02:03,050 --> 00:02:08,290
Puoi nominare una persona qui con un carattere iniziale minuscolo che è una specie di convenzione qui.

24
00:02:08,330 --> 00:02:13,970
Potresti usare una maiuscola e poi potresti restituire un po 'di genio X qui.

25
00:02:13,970 --> 00:02:16,050
Puoi assolutamente farlo.

26
00:02:16,070 --> 00:02:22,550
È inoltre possibile utilizzare la sintassi Diest cinque per creare una variabile che contiene una funzione che alla

27
00:02:22,550 --> 00:02:24,570
fine risulterebbe nello stesso modo.

28
00:02:25,070 --> 00:02:29,450
Ma lo userò come sei in questo corso che consiglio vivamente di fare.

29
00:02:29,450 --> 00:02:32,700
È una specie di best practice quando si trattano i progetti Riak.

30
00:02:32,720 --> 00:02:36,080
Ti dà accesso a molte nuove e moderne funzionalità.

31
00:02:36,170 --> 00:02:42,650
Quindi tratterò una variabile non con la parola keyword ma con la parola Konski perché non ho intenzione di

32
00:02:42,650 --> 00:02:45,950
cambiare questa variabile in modo efficace rendendola una costante.

33
00:02:46,070 --> 00:02:48,410
E quindi dovremmo mercato in quanto tale.

34
00:02:48,530 --> 00:02:51,430
Lo chiamerò persona con un carattere minuscolo.

35
00:02:51,730 --> 00:02:59,930
Come ho detto, puoi scegliere una persona con la P maiuscola ma spesso vedi il nome della funzione in minuscolo.

36
00:02:59,930 --> 00:03:06,980
In caso contrario dovrebbe essere lo stesso nome del nome del file o del nome del componente Asti che si desidera utilizzare.

37
00:03:07,100 --> 00:03:12,380
Quindi assegnerò un valore a questa variabile o costante per essere precisi.

38
00:03:12,560 --> 00:03:14,330
E questa dovrebbe essere una funzione.

39
00:03:14,380 --> 00:03:18,880
Ora potrei usare di nuovo la funzione qui, ma in realtà voglio usare il si.

40
00:03:18,920 --> 00:03:20,580
Sintassi a sei funzioni.

41
00:03:20,690 --> 00:03:29,810
Questa sintassi della funzione freccia quindi dirò il corpo della funzione della freccia dell'elenco di argomenti uguali.

42
00:03:29,810 --> 00:03:31,310
Questo è solo un sei.

43
00:03:31,310 --> 00:03:35,090
Equivalente alla funzione creata con la parola chiave function.

44
00:03:35,090 --> 00:03:41,480
Tiene alcuni vantaggi specialmente quando si tratta di questa parola chiave, quindi ti raccomando

45
00:03:41,480 --> 00:03:43,520
caldamente di usare questa sintassi.

46
00:03:43,520 --> 00:03:49,970
Se questo è nuovo di zecca per te ora lo sai e in generale potresti essere

47
00:03:49,970 --> 00:03:57,890
interessato anche ad immergerti in sei corsi o materiali didattici, semplicemente impari a conoscere tutte le fantastiche funzioni che sì

48
00:03:57,890 --> 00:04:00,140
6 ha da offrire come questa.

49
00:04:00,140 --> 00:04:01,800
Torna comunque alla sintassi.

50
00:04:01,970 --> 00:04:08,510
Abbiamo effettivamente una funzione qui e come ho detto nella sua forma più semplice un componente è una funzione che

51
00:04:08,510 --> 00:04:10,020
restituisce alcuni J S x.

52
00:04:10,010 --> 00:04:11,010
Quindi facciamolo.

53
00:04:11,240 --> 00:04:22,770
Torniamo indietro come X e potremmo semplicemente restituire un paragrafo qui dove dico che ora sono una persona.

54
00:04:22,790 --> 00:04:30,970
Questo da solo crea una funzione valida che potremmo usare come componente, ma dobbiamo anche fare due cose.

55
00:04:30,980 --> 00:04:36,020
Hai un'idea di cosa dobbiamo fare.

56
00:04:36,090 --> 00:04:44,850
tieni a mente che questa sintassi GSX viene trasformata per reagire creando elemento e per poter chiamare questo metodo.

57
00:04:44,940 --> 00:04:49,220
Per uno abbiamo bisogno di importare lo scarto perché

58
00:04:49,260 --> 00:04:55,500
Abbiamo bisogno di importare reagire con una capitale sono dal pacchetto re-act come questo.

59
00:04:55,500 --> 00:05:03,800
Così come facciamo in Abchurch Sì, qui non abbiamo bisogno di componente, perché qui non stiamo usando una

60
00:05:03,800 --> 00:05:05,830
classe che estende il componente.

61
00:05:05,960 --> 00:05:08,270
Invece stiamo creando una funzione.

62
00:05:08,720 --> 00:05:14,300
Abbiamo comunque bisogno di esportare quella funzione come default di questo file.

63
00:05:14,300 --> 00:05:21,890
seguire in modo che questo Daut qui appaia e vediamo solo la croce e ora possiamo iniziare

64
00:05:21,890 --> 00:05:29,360
ad usare questo componente in altri aspetti del nostro progetto, ovvero nell'unico componente il nostro componente radice.

65
00:05:29,450 --> 00:05:35,930
Qui esportiamo questa persona Constand che detiene questa funzione con quella che è sicura da

66
00:05:35,930 --> 00:05:40,570
Abbiamo ancora pensato che l'India fosse caduta lì.

67
00:05:40,580 --> 00:05:45,290
Aggiungerò un'importazione e importerò una persona.

68
00:05:45,290 --> 00:05:50,420
Questo nome è ora totalmente a tuo carico, ma dovrebbe essere il nome dei tuoi componenti che iniziano con

69
00:05:50,420 --> 00:05:51,370
un carattere maiuscolo.

70
00:05:52,630 --> 00:06:01,210
Dalla barra dei punti perché è un payoff relativo alla cartella persona.

71
00:06:01,360 --> 00:06:08,320
Quindi, facendo riferimento alla cartella dis che si trova nello stesso percorso del laptop, cadi e lì la persona

72
00:06:08,380 --> 00:06:15,700
che js file, però, possiamo omettere il punto J ass perché è aggiunto automaticamente dal flusso di lavoro di build.

73
00:06:15,700 --> 00:06:21,140
Ora è importante dargli un nome che inizia con il carattere maiuscolo.

74
00:06:21,250 --> 00:06:26,320
Puoi usare qualsiasi altro nome che non debba essere una persona, anche se

75
00:06:26,320 --> 00:06:34,000
ha senso usare per nominare alcuni componenti, ma dovrebbe avere un carattere positivo perché reagisce in GSX tutti gli

76
00:06:34,000 --> 00:06:40,740
elementi che iniziano con caratteri minuscoli come div dove 1 è riservato per gli elementi HVM nativi.

77
00:06:41,050 --> 00:06:47,710
Quindi potresti creare il tuo componente che hai chiamato div con D maiuscola e Riette potrebbe

78
00:06:47,710 --> 00:06:53,800
usarlo perché non interferirebbe con la def normale e per lo stesso motivo dovresti dare

79
00:06:53,800 --> 00:06:59,710
alla tua persona il carattere maiuscolo in modo che re-act lo identifichi come componente personalizzato.

80
00:07:00,040 --> 00:07:07,150
chiusura in questo modo o perché non annidiamo nulla tra noi o torniamo a papà e anche alle prossime lezioni.

81
00:07:07,150 --> 00:07:11,550
Quindi usiamo la persona qui e possiamo usare il tag di apertura e

82
00:07:11,830 --> 00:07:19,730
Puoi anche usare un tag di chiusura automatica in cui la barra e poi il segno più grande di firmare il dnt con debito se si

83
00:07:19,730 --> 00:07:20,740
salva questo autunno.

84
00:07:20,740 --> 00:07:26,560
D E ora torni alla tua applicazione con l'avvio NPM ancora in esecuzione nel terminale.

85
00:07:26,600 --> 00:07:32,700
Vedete che sono una persona sottoposta a rendering sotto il contenuto della nostra app.

86
00:07:32,750 --> 00:07:35,210
Questo è ora in arrivo dal nostro stesso componente.

87
00:07:35,300 --> 00:07:40,970
E se controlliamo che stiamo vedendo la fine non vediamo il nostro elemento personalizzato, vediamo solo il paragrafo

88
00:07:40,970 --> 00:07:45,130
che stiamo esportando in funzione e che è in realtà come dovrebbe essere.

89
00:07:45,620 --> 00:07:53,300
Quindi questo è ora il nostro unico componente che si sta utilizzando, ovviamente, come se fosse già bello,

90
00:07:53,300 --> 00:08:01,270
ma quale è esattamente il vantaggio di trattarlo in questo modo invece di aggiungere semplicemente il codice direttamente

91
00:08:01,280 --> 00:08:02,470
agli oggetti apt.

92
00:08:02,510 --> 00:08:07,200
Facciamo di più con questo componente per vedere che beneficio nella prossima lezione.

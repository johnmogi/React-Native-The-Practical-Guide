1
00:00:02,210 --> 00:00:08,480
Dowiedzieliśmy się już dużo o podstawowych podstawach reagowania, szczególnie tego jsx, co jest bardzo

2
00:00:08,480 --> 00:00:14,930
ważne, aby uzyskać prawo i zrozumienie, ale wspomniałem również w pierwszym module kursu, który reaguje

3
00:00:15,140 --> 00:00:21,890
na wszystkie komponenty, budujesz swoją aplikację za pomocą komponentów i reaguj jak biblioteka, dzięki której

4
00:00:21,890 --> 00:00:24,410
budowanie tych komponentów jest tak łatwe.

5
00:00:24,590 --> 00:00:27,590
Teraz używamy tylko jednego komponentu, czas

6
00:00:27,620 --> 00:00:33,870
to zmienić i do tego dodam nowy plik w folderze źródłowym naszego projektu.

7
00:00:33,890 --> 00:00:39,020
Dodam nawet nowy folder, a ja nadam mu nazwę Person z wysokim P.

8
00:00:39,100 --> 00:00:41,220
Taka konwencja reaguje, nie

9
00:00:41,240 --> 00:00:48,620
musisz tego robić, ale dajesz swoim komponentom pliki, w których tworzysz kapitałowe znaki

10
00:00:48,620 --> 00:00:54,380
początkowe, i opisujesz, czym właściwie jest ten komponent i tutaj

11
00:00:54,380 --> 00:01:01,490
chcę przekazać pewne informacje o osobie . Wewnątrz folderu tej osoby, który jest przechowywany w folderze

12
00:01:01,490 --> 00:01:04,120
źródłowym lub w osobie. plik js,

13
00:01:04,220 --> 00:01:09,410
ponownie zgodny z tą konwencją, mający kapitałowy charakter początkowy i

14
00:01:09,410 --> 00:01:16,420
opisujący, o co chodzi w tym komponencie. Teraz chciałbym stworzyć komponent i już to zrobiliśmy,

15
00:01:16,520 --> 00:01:23,750
w rzeczywistości otrzymaliśmy go z pudełka w aplikacji. plik js poprzez rozszerzenie klasy komponentów

16
00:01:23,750 --> 00:01:25,580
z biblioteki reagowania.

17
00:01:25,670 --> 00:01:31,940
Możemy bezwzględnie stosować to podejście, a później stanie się ważniejsze, gdy dowiesz się

18
00:01:32,300 --> 00:01:37,800
także o stanie, który zasadniczo pozwala na zmianę komponentu w czasie wykonywania.

19
00:01:38,060 --> 00:01:43,850
Ale przez większość czasu powinieneś używać innej formy komponentu

20
00:01:43,850 --> 00:01:51,620
lub tworzenia komponentów, lepszej funkcji, prostej funkcji javascript, ponieważ w najprostszej postaci

21
00:01:51,950 --> 00:01:58,480
komponent jest po prostu funkcją, która zwraca jakiś jsx, jakiś

22
00:01:58,520 --> 00:02:03,040
html, który mógłbyś powiedzieć. Teraz możesz oczywiście utworzyć funkcję ze

23
00:02:03,050 --> 00:02:08,290
słowem kluczowym function, możesz nazwać osobę, tutaj z małą postacią początkową, która jest

24
00:02:08,330 --> 00:02:13,970
także tego rodzaju konwencją tutaj, ale możesz użyć kapitału ale możesz tu zwrócić jsx

25
00:02:13,970 --> 00:02:16,050
, absolutnie możesz to zrobić.

26
00:02:16,070 --> 00:02:22,550
Można również użyć składni ES5 tworzenia zmiennej, która posiada funkcję, która w

27
00:02:22,550 --> 00:02:24,570
rezultacie spowoduje to samo.

28
00:02:25,070 --> 00:02:29,450
Ale będę używał ES6 w tym kursie, który zdecydowanie zalecam,

29
00:02:29,450 --> 00:02:32,700
jest to najlepsza praktyka w leczeniu projektów reakcji,

30
00:02:32,720 --> 00:02:36,080
daje dostęp do wielu nowych i nowoczesnych funkcji.

31
00:02:36,170 --> 00:02:42,650
Dlatego utworzę zmienną nie za pomocą słowa kluczowego var, lecz za słowem const, ponieważ nie planuję

32
00:02:42,650 --> 00:02:45,950
zmieniać tej zmiennej skutecznie, czyniąc ją stałą i

33
00:02:46,070 --> 00:02:48,410
dlatego powinniśmy oznaczyć ją jako taką.

34
00:02:48,530 --> 00:02:51,430
Nazwę go osobą małymi literami, ponieważ powiedziałem,

35
00:02:51,730 --> 00:02:59,930
że możesz wybrać osobę z wielką literą P, ale często widzisz, że nazwa funkcji składa się wyłącznie z małych liter,

36
00:02:59,930 --> 00:03:06,980
w przeciwnym razie powinna być taka sama jak nazwa pliku lub jako nazwa komponentu, którą chcesz używać.

37
00:03:07,100 --> 00:03:12,380
Następnie przypiszę wartość tej zmiennej lub stałej, aby była dokładna i

38
00:03:12,560 --> 00:03:14,330
powinna to być funkcja.

39
00:03:14,380 --> 00:03:18,880
Teraz znowu mógłbym użyć funkcji tutaj, ale w

40
00:03:18,920 --> 00:03:20,580
rzeczywistości chcę użyć

41
00:03:20,690 --> 00:03:29,810
składni funkcji ES6, tej składni funkcji strzałki, więc powiem ciałę strzałki ze strzałką z listą argumentów.

42
00:03:29,810 --> 00:03:31,310
Jest to po

43
00:03:31,310 --> 00:03:35,090
prostu odpowiednik ES6 funkcji utworzonej za pomocą słowa

44
00:03:35,090 --> 00:03:41,480
kluczowego function, ma pewne zalety, szczególnie jeśli chodzi o to słowo kluczowe, więc zdecydowanie

45
00:03:41,480 --> 00:03:43,520
polecam użycie tej składni.

46
00:03:43,520 --> 00:03:49,970
Jeśli jest to dla Ciebie zupełnie nowe, teraz już wiesz i generalnie możesz

47
00:03:49,970 --> 00:03:57,890
zainteresować się również nurkowaniem na niektóre kursy ES6 lub materiały do ​​nauki, po prostu poznasz wszystkie

48
00:03:57,890 --> 00:04:00,140
niesamowite funkcje, jakie oferuje ES6.

49
00:04:00,140 --> 00:04:01,800
Wracając jednak do składni,

50
00:04:01,970 --> 00:04:08,510
efektywnie mamy tutaj funkcję i jak powiedziałem w jej najprostszej formie, komponent jest funkcją

51
00:04:08,510 --> 00:04:10,020
zwracającą niektóre jsx.

52
00:04:10,010 --> 00:04:11,010
Zróbmy to,

53
00:04:11,240 --> 00:04:22,770
zwróćmy jsx i możemy po prostu zwrócić akapit tutaj, gdzie mówię, że jestem osobą. Teraz to samo tworzy ważną funkcję, którą

54
00:04:22,790 --> 00:04:30,970
moglibyśmy użyć jako komponent, ale musimy również zrobić dwie inne rzeczy.

55
00:04:30,980 --> 00:04:36,020
Czy masz pomysł, co musimy zrobić?

56
00:04:36,090 --> 00:04:44,850
Po pierwsze, musimy zaimportować reagować, ponieważ pamiętajmy, że składnia jsx jest przekształcana, aby reagować na element create

57
00:04:44,940 --> 00:04:49,220
i móc wywoływać tę metodę, musimy zaimportować reagować

58
00:04:49,260 --> 00:04:55,500
z dużą wartością R z pakietu reakcji, tak jak to, więc tak

59
00:04:55,500 --> 00:05:03,800
jak my zrób w aplikacji. js tutaj. Nie potrzebujemy tego komponentu, ponieważ tutaj

60
00:05:03,800 --> 00:05:05,830
nie używamy klasy, która rozszerza

61
00:05:05,960 --> 00:05:08,270
komponent, zamiast tego tworzymy funkcję.

62
00:05:08,720 --> 00:05:14,300
Nadal musimy wyeksportować tę funkcję jako domyślną dla tego pliku, tutaj

63
00:05:14,300 --> 00:05:21,890
eksportujemy tę stałą osoby, która posiada tę funkcję. Za pomocą tego zapiszmy pliki, aby ta kropka

64
00:05:21,890 --> 00:05:29,360
tutaj zniknęła i widzimy tylko krzyż, a teraz możemy zacząć używać tego komponentu w innych

65
00:05:29,450 --> 00:05:35,930
plikach naszego projektu, a mianowicie w jedynym innym komponencie, którego nasz składnik root

66
00:05:35,930 --> 00:05:40,570
mamy jeszcze w aplikacji. plik js. Tam dodaję import

67
00:05:40,580 --> 00:05:45,290
i będę importować osobę, ta nazwa jest teraz

68
00:05:45,290 --> 00:05:50,420
całkowicie od Ciebie zależna, ale powinna to być nazwa

69
00:05:50,420 --> 00:05:51,370
twoich komponentów

70
00:05:52,630 --> 00:06:01,210
zaczynająca się od znaku kapitału, od kropki, ponieważ jest to względna ścieżka, folder osoby.

71
00:06:01,360 --> 00:06:08,320
Odwołując się do tego folderu, który znajduje się na tej samej ścieżce co aplikacja. js i tam ta osoba. plik js,

72
00:06:08,380 --> 00:06:15,700
choć możemy pominąć. js, ponieważ jest on dodawany automatycznie przez przepływ pracy budowania.

73
00:06:15,700 --> 00:06:21,140
Teraz ważne jest, aby podać to jako nazwę zaczynającą się od wielkiej litery.

74
00:06:21,250 --> 00:06:26,320
Możesz wybrać dowolną inną nazwę, nie musi to być osoba, ale warto

75
00:06:26,320 --> 00:06:34,000
używać nazwy komponentu, ale powinna ona mieć wielką literę. Ponieważ w odpowiedzi, w jsx, wszystkie elementy zaczynające

76
00:06:34,000 --> 00:06:40,740
się od małych liter, takich jak div lub h1, są zarezerwowane dla natywnych elementów HTML.

77
00:06:41,050 --> 00:06:47,710
Abyś mógł stworzyć swój własny komponent, który nazwałbyś div z wielką literą D, a następnie zareagowałby

78
00:06:47,710 --> 00:06:53,800
na to, ponieważ nie kolidowałoby to z normalnym divem i z tego samego powodu,

79
00:06:53,800 --> 00:06:59,710
powinieneś nadać swojej osobie wielką postać, tak aby zareagowała identyfikując ją jako niestandardowy komponent.

80
00:07:00,040 --> 00:07:07,150
Użyjmy więc osoby tutaj i możemy albo użyć tagu otwierającego i zamykającego w ten sposób, albo ponieważ nie zagnieżdżamy niczego

81
00:07:07,150 --> 00:07:11,550
pomiędzy, powrócę do tego również w następnych wykładach, możesz też użyć tagu zamykającego

82
00:07:11,830 --> 00:07:19,730
się automatycznie z cięcie, a następnie większy niż znak na końcu. Dzięki temu, jeśli zapiszesz ten plik również,

83
00:07:19,730 --> 00:07:20,740
a teraz

84
00:07:20,740 --> 00:07:26,560
wrócisz do swojej aplikacji z npm start nadal działającym w

85
00:07:26,600 --> 00:07:32,700
terminalu, zobaczysz, że jestem renderowany poniżej zawartości naszego komponentu aplikacji.

86
00:07:32,750 --> 00:07:35,210
To teraz pochodzi z naszego własnego

87
00:07:35,300 --> 00:07:40,970
komponentu i jeśli sprawdzimy to, widzimy w końcu, że nie widzimy naszego niestandardowego elementu, widzimy

88
00:07:40,970 --> 00:07:45,130
tylko akapit, który eksportujemy w funkcji i tak właśnie powinno być.

89
00:07:45,620 --> 00:07:53,300
Więc to jest teraz nasz jedyny komponent, który jest wykorzystywany, oczywiście używanie go tak, jak to jest już miłe, ale co to jest korzyść z

90
00:07:53,300 --> 00:08:01,270
tworzenia tego w ten sposób, zamiast po prostu dodawać kod bezpośrednio do aplikacji. plik js.

91
00:08:01,280 --> 00:08:02,470
&nbsp;

92
00:08:02,510 --> 00:08:07,200
Zróbmy więcej z tym komponentem, aby zobaczyć tę korzyść w następnym wykładzie.
